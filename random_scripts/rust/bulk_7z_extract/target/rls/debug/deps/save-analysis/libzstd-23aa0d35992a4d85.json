{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0","program":"/Users/iharte/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","zstd","--edition=2018","/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","split-debuginfo=unpacked","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"legacy\"","-C","metadata=23aa0d35992a4d85","-C","extra-filename=-23aa0d35992a4d85","--out-dir","/Users/iharte/Projects/Research/HUNT/ThreatHunt---Personal/random_scripts/rust/bulk_7z_extract/target/rls/debug/deps","-L","dependency=/Users/iharte/Projects/Research/HUNT/ThreatHunt---Personal/random_scripts/rust/bulk_7z_extract/target/rls/debug/deps","--extern","zstd_safe=/Users/iharte/Projects/Research/HUNT/ThreatHunt---Personal/random_scripts/rust/bulk_7z_extract/target/rls/debug/deps/libzstd_safe-cb2f475e143b8806.rmeta","--cap-lints","allow","-L","native=/Users/iharte/Projects/Research/HUNT/ThreatHunt---Personal/random_scripts/rust/bulk_7z_extract/target/rls/debug/build/zstd-sys-62e1cb3f01d6945c/out","--error-format=json","--sysroot","/Users/iharte/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/iharte/Projects/Research/HUNT/ThreatHunt---Personal/random_scripts/rust/bulk_7z_extract/target/rls/debug/deps/libzstd-23aa0d35992a4d85.rmeta"},"prelude":{"crate_id":{"name":"zstd","disambiguator":[57595971771495619,0]},"crate_root":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src","external_crates":[{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[7777094053559708767,0]}},{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[10550174156715778454,0]}},{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[8770346864682343241,0]}},{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[8196830942918118636,0]}},{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[12786826162718588903,0]}},{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[7262382603413566750,0]}},{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[12233289566066112318,0]}},{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[4998072162051350919,0]}},{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[14817392966914922723,0]}},{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[13537029249427453884,0]}},{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[16172866892641339196,0]}},{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[18226255698322429307,0]}},{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[12872472635654720224,0]}},{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[15477836623066676988,0]}},{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[8883445751219211826,0]}},{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/lib.rs","num":16,"id":{"name":"panic_unwind","disambiguator":[4189598673803333586,0]}},{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/dict.rs","num":17,"id":{"name":"zstd_safe","disambiguator":[2969741165200941724,0]}},{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/dict.rs","num":18,"id":{"name":"zstd_sys","disambiguator":[258398559913322565,0]}}],"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/lib.rs","byte_start":0,"byte_end":1906,"line_start":1,"line_end":74,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":545},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/mod.rs","byte_start":2168,"byte_end":2178,"line_start":10,"line_end":10,"column_start":27,"column_end":37},"alias_span":null,"name":"Compressor","value":"","parent":{"krate":0,"index":3}},{"kind":"Use","ref_id":{"krate":0,"index":550},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/mod.rs","byte_start":2208,"byte_end":2220,"line_start":11,"line_end":11,"column_start":29,"column_end":41},"alias_span":null,"name":"Decompressor","value":"","parent":{"krate":0,"index":3}},{"kind":"Use","ref_id":{"krate":17,"index":167},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/dict.rs","byte_start":9511,"byte_end":9516,"line_start":23,"line_end":23,"column_start":21,"column_end":26},"alias_span":null,"name":"CDict","value":"","parent":{"krate":0,"index":56}},{"kind":"Use","ref_id":{"krate":17,"index":187},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/dict.rs","byte_start":9518,"byte_end":9523,"line_start":23,"line_end":23,"column_start":28,"column_end":33},"alias_span":null,"name":"DDict","value":"","parent":{"krate":0,"index":56}},{"kind":"Use","ref_id":{"krate":0,"index":329},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/zio/mod.rs","byte_start":36798,"byte_end":36804,"line_start":6,"line_end":6,"column_start":23,"column_end":29},"alias_span":null,"name":"Reader","value":"","parent":{"krate":0,"index":307}},{"kind":"Use","ref_id":{"krate":0,"index":377},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/zio/mod.rs","byte_start":36828,"byte_end":36834,"line_start":7,"line_end":7,"column_start":23,"column_end":29},"alias_span":null,"name":"Writer","value":"","parent":{"krate":0,"index":307}},{"kind":"Use","ref_id":{"krate":17,"index":368},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":52617,"byte_end":52627,"line_start":9,"line_end":9,"column_start":21,"column_end":31},"alias_span":null,"name":"CParameter","value":"","parent":{"krate":0,"index":414}},{"kind":"Use","ref_id":{"krate":17,"index":341},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":52629,"byte_end":52639,"line_start":9,"line_end":9,"column_start":33,"column_end":43},"alias_span":null,"name":"DParameter","value":"","parent":{"krate":0,"index":414}},{"kind":"Use","ref_id":{"krate":17,"index":352},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":52641,"byte_end":52649,"line_start":9,"line_end":9,"column_start":45,"column_end":53},"alias_span":null,"name":"InBuffer","value":"","parent":{"krate":0,"index":414}},{"kind":"Use","ref_id":{"krate":17,"index":359},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":52651,"byte_end":52660,"line_start":9,"line_end":9,"column_start":55,"column_end":64},"alias_span":null,"name":"OutBuffer","value":"","parent":{"krate":0,"index":414}},{"kind":"Use","ref_id":{"krate":17,"index":212},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":52662,"byte_end":52670,"line_start":9,"line_end":9,"column_start":66,"column_end":74},"alias_span":null,"name":"WriteBuf","value":"","parent":{"krate":0,"index":414}},{"kind":"Use","ref_id":{"krate":0,"index":299},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/mod.rs","byte_start":15083,"byte_end":15094,"line_start":20,"line_end":20,"column_start":27,"column_end":38},"alias_span":null,"name":"copy_decode","value":"","parent":{"krate":0,"index":104}},{"kind":"Use","ref_id":{"krate":0,"index":304},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/mod.rs","byte_start":15096,"byte_end":15107,"line_start":20,"line_end":20,"column_start":40,"column_end":51},"alias_span":null,"name":"copy_encode","value":"","parent":{"krate":0,"index":104}},{"kind":"Use","ref_id":{"krate":0,"index":297},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/mod.rs","byte_start":15109,"byte_end":15119,"line_start":20,"line_end":20,"column_start":53,"column_end":63},"alias_span":null,"name":"decode_all","value":"","parent":{"krate":0,"index":104}},{"kind":"Use","ref_id":{"krate":0,"index":302},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/mod.rs","byte_start":15121,"byte_end":15131,"line_start":20,"line_end":20,"column_start":65,"column_end":75},"alias_span":null,"name":"encode_all","value":"","parent":{"krate":0,"index":104}},{"kind":"Use","ref_id":{"krate":0,"index":136},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/mod.rs","byte_start":15154,"byte_end":15161,"line_start":21,"line_end":21,"column_start":21,"column_end":28},"alias_span":null,"name":"Decoder","value":"","parent":{"krate":0,"index":104}},{"kind":"Use","ref_id":{"krate":0,"index":222},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/mod.rs","byte_start":15185,"byte_end":15202,"line_start":22,"line_end":22,"column_start":23,"column_end":40},"alias_span":null,"name":"AutoFinishEncoder","value":"","parent":{"krate":0,"index":104}},{"kind":"Use","ref_id":{"krate":0,"index":214},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/mod.rs","byte_start":15204,"byte_end":15211,"line_start":22,"line_end":22,"column_start":42,"column_end":49},"alias_span":null,"name":"Encoder","value":"","parent":{"krate":0,"index":104}},{"kind":"Use","ref_id":{"krate":17,"index":40},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/lib.rs","byte_start":743,"byte_end":757,"line_start":32,"line_end":32,"column_start":20,"column_end":34},"alias_span":null,"name":"DEFAULT_COMPRESSION_LEVEL","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":297},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/lib.rs","byte_start":1029,"byte_end":1039,"line_start":41,"line_end":41,"column_start":25,"column_end":35},"alias_span":null,"name":"decode_all","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":302},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/lib.rs","byte_start":1041,"byte_end":1051,"line_start":41,"line_end":41,"column_start":37,"column_end":47},"alias_span":null,"name":"encode_all","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":136},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/lib.rs","byte_start":1053,"byte_end":1060,"line_start":41,"line_end":41,"column_start":49,"column_end":56},"alias_span":null,"name":"Decoder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":214},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/lib.rs","byte_start":1062,"byte_end":1069,"line_start":41,"line_end":41,"column_start":58,"column_end":65},"alias_span":null,"name":"Encoder","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/lib.rs","byte_start":0,"byte_end":1906,"line_start":1,"line_end":74,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":56},{"krate":0,"index":104},{"krate":0,"index":524},{"krate":0,"index":527},{"krate":0,"index":530},{"krate":0,"index":531},{"krate":0,"index":532},{"krate":0,"index":535},{"krate":0,"index":538},{"krate":0,"index":541},{"krate":0,"index":544}],"decl_id":null,"docs":" Rust binding to the [zstd library][zstd].","sig":null,"attributes":[{"value":"/ Rust binding to the [zstd library][zstd].","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/lib.rs","byte_start":0,"byte_end":45,"line_start":1,"line_end":1,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/lib.rs","byte_start":46,"byte_end":49,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This crate provides:","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/lib.rs","byte_start":50,"byte_end":74,"line_start":3,"line_end":3,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/lib.rs","byte_start":75,"byte_end":78,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ * An [encoder](stream/write/struct.Encoder.html) to compress data using zstd","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/lib.rs","byte_start":79,"byte_end":159,"line_start":5,"line_end":5,"column_start":1,"column_end":81}},{"value":"/   and send the output to another write.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/lib.rs","byte_start":160,"byte_end":203,"line_start":6,"line_end":6,"column_start":1,"column_end":44}},{"value":"/ * A [decoder](stream/read/struct.Decoder.html) to read input data from a `Read`","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/lib.rs","byte_start":204,"byte_end":287,"line_start":7,"line_end":7,"column_start":1,"column_end":84}},{"value":"/   and decompress it.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/lib.rs","byte_start":288,"byte_end":312,"line_start":8,"line_end":8,"column_start":1,"column_end":25}},{"value":"/ * Convenient functions for common tasks.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/lib.rs","byte_start":313,"byte_end":357,"line_start":9,"line_end":9,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/lib.rs","byte_start":358,"byte_end":361,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/lib.rs","byte_start":362,"byte_end":375,"line_start":11,"line_end":11,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/lib.rs","byte_start":376,"byte_end":379,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/lib.rs","byte_start":380,"byte_end":393,"line_start":13,"line_end":13,"column_start":1,"column_end":14}},{"value":"/ use std::io;","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/lib.rs","byte_start":394,"byte_end":410,"line_start":14,"line_end":14,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/lib.rs","byte_start":411,"byte_end":414,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/lib.rs","byte_start":415,"byte_end":430,"line_start":16,"line_end":16,"column_start":1,"column_end":16}},{"value":"/ \t// Uncompress input and print the result.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/lib.rs","byte_start":431,"byte_end":477,"line_start":17,"line_end":17,"column_start":1,"column_end":47}},{"value":"/ \tzstd::stream::copy_decode(io::stdin(), io::stdout()).unwrap();","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/lib.rs","byte_start":478,"byte_end":545,"line_start":18,"line_end":18,"column_start":1,"column_end":68}},{"value":"/ }","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/lib.rs","byte_start":546,"byte_end":551,"line_start":19,"line_end":19,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/lib.rs","byte_start":552,"byte_end":559,"line_start":20,"line_end":20,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/lib.rs","byte_start":560,"byte_end":563,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ [zstd]: https://github.com/facebook/zstd","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/lib.rs","byte_start":564,"byte_end":608,"line_start":22,"line_end":22,"column_start":1,"column_end":45}},{"value":"deny(missing_docs)","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/lib.rs","byte_start":609,"byte_end":631,"line_start":23,"line_end":23,"column_start":1,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":3},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"block","qualname":"::block","value":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/mod.rs","parent":null,"children":[{"krate":0,"index":4},{"krate":0,"index":23},{"krate":0,"index":43},{"krate":0,"index":46},{"krate":0,"index":49},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":55}],"decl_id":null,"docs":" Compress and decompress individual blocks.","sig":null,"attributes":[{"value":"/ Compress and decompress individual blocks.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/mod.rs","byte_start":1908,"byte_end":1954,"line_start":1,"line_end":1,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/mod.rs","byte_start":1955,"byte_end":1958,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ These methods process all the input data at once.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/mod.rs","byte_start":1959,"byte_end":2012,"line_start":3,"line_end":3,"column_start":1,"column_end":54}},{"value":"/ It is therefore best used with relatively small blocks","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/mod.rs","byte_start":2013,"byte_end":2071,"line_start":4,"line_end":4,"column_start":1,"column_end":59}},{"value":"/ (like small network packets).","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/mod.rs","byte_start":2072,"byte_end":2105,"line_start":5,"line_end":5,"column_start":1,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":545},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/compressor.rs","byte_start":4350,"byte_end":4360,"line_start":11,"line_end":11,"column_start":12,"column_end":22},"name":"Compressor","qualname":"::block::compressor::Compressor","value":"Compressor {  }","parent":null,"children":[{"krate":0,"index":546},{"krate":0,"index":547}],"decl_id":null,"docs":" Allows to compress independently multiple blocks of data.","sig":null,"attributes":[{"value":"/ Allows to compress independently multiple blocks of data.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/compressor.rs","byte_start":4117,"byte_end":4178,"line_start":6,"line_end":6,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/compressor.rs","byte_start":4179,"byte_end":4182,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This reduces memory usage compared to calling `compress` multiple times.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/compressor.rs","byte_start":4183,"byte_end":4259,"line_start":8,"line_end":8,"column_start":1,"column_end":77}},{"value":"/ The compressed blocks are still completely independent.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/compressor.rs","byte_start":4260,"byte_end":4319,"line_start":9,"line_end":9,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":15},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/compressor.rs","byte_start":4491,"byte_end":4494,"line_start":18,"line_end":18,"column_start":12,"column_end":15},"name":"new","qualname":"<Compressor>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new zstd compressor\n","sig":null,"attributes":[{"value":"/ Creates a new zstd compressor","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/compressor.rs","byte_start":4446,"byte_end":4479,"line_start":17,"line_end":17,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":16},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/compressor.rs","byte_start":4634,"byte_end":4643,"line_start":23,"line_end":23,"column_start":12,"column_end":21},"name":"with_dict","qualname":"<Compressor>::with_dict","value":"pub fn with_dict(Vec<u8>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new zstd compressor, using the given dictionary.\n","sig":null,"attributes":[{"value":"/ Creates a new zstd compressor, using the given dictionary.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/compressor.rs","byte_start":4560,"byte_end":4622,"line_start":22,"line_end":22,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":17},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/compressor.rs","byte_start":5075,"byte_end":5093,"line_start":36,"line_end":36,"column_start":12,"column_end":30},"name":"compress_to_buffer","qualname":"<Compressor>::compress_to_buffer","value":"pub fn compress_to_buffer<C: zstd_safe::WriteBuf +\n                          ?Sized>(&mut Self, &[u8], &mut C, i32)\n-> io::Result<usize>","parent":null,"children":[],"decl_id":null,"docs":" Compress a single block of data to the given destination buffer.","sig":null,"attributes":[{"value":"/ Compress a single block of data to the given destination buffer.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/compressor.rs","byte_start":4776,"byte_end":4844,"line_start":30,"line_end":30,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/compressor.rs","byte_start":4849,"byte_end":4852,"line_start":31,"line_end":31,"column_start":5,"column_end":8}},{"value":"/ Returns the number of bytes written, or an error if something happened","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/compressor.rs","byte_start":4857,"byte_end":4931,"line_start":32,"line_end":32,"column_start":5,"column_end":79}},{"value":"/ (for instance if the destination buffer was too small).","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/compressor.rs","byte_start":4936,"byte_end":4995,"line_start":33,"line_end":33,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/compressor.rs","byte_start":5000,"byte_end":5003,"line_start":34,"line_end":34,"column_start":5,"column_end":8}},{"value":"/ A level of `0` uses zstd's default (currently `3`).","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/compressor.rs","byte_start":5008,"byte_end":5063,"line_start":35,"line_end":35,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":19},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/compressor.rs","byte_start":5539,"byte_end":5547,"line_start":50,"line_end":50,"column_start":12,"column_end":20},"name":"compress","qualname":"<Compressor>::compress","value":"pub fn compress(&mut Self, &[u8], i32) -> io::Result<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Compresses a block of data and returns the compressed result.","sig":null,"attributes":[{"value":"/ Compresses a block of data and returns the compressed result.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/compressor.rs","byte_start":5394,"byte_end":5459,"line_start":47,"line_end":47,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/compressor.rs","byte_start":5464,"byte_end":5467,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ A level of `0` uses zstd's default (currently `3`).","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/compressor.rs","byte_start":5472,"byte_end":5527,"line_start":49,"line_end":49,"column_start":5,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":550},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/decompressor.rs","byte_start":6394,"byte_end":6406,"line_start":12,"line_end":12,"column_start":12,"column_end":24},"name":"Decompressor","qualname":"::block::decompressor::Decompressor","value":"Decompressor {  }","parent":null,"children":[{"krate":0,"index":551},{"krate":0,"index":552}],"decl_id":null,"docs":" Allows to decompress independently multiple blocks of data.","sig":null,"attributes":[{"value":"/ Allows to decompress independently multiple blocks of data.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/decompressor.rs","byte_start":6217,"byte_end":6280,"line_start":8,"line_end":8,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/decompressor.rs","byte_start":6281,"byte_end":6284,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ This reduces memory usage compared to calling `decompress` multiple times.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/decompressor.rs","byte_start":6285,"byte_end":6363,"line_start":10,"line_end":10,"column_start":1,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/decompressor.rs","byte_start":6542,"byte_end":6545,"line_start":19,"line_end":19,"column_start":12,"column_end":15},"name":"new","qualname":"<Decompressor>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new zstd decompressor.\n","sig":null,"attributes":[{"value":"/ Creates a new zstd decompressor.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/decompressor.rs","byte_start":6494,"byte_end":6530,"line_start":18,"line_end":18,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/decompressor.rs","byte_start":6689,"byte_end":6698,"line_start":24,"line_end":24,"column_start":12,"column_end":21},"name":"with_dict","qualname":"<Decompressor>::with_dict","value":"pub fn with_dict(Vec<u8>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new zstd decompressor, using the given dictionary.\n","sig":null,"attributes":[{"value":"/ Creates a new zstd decompressor, using the given dictionary.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/decompressor.rs","byte_start":6613,"byte_end":6677,"line_start":23,"line_end":23,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/decompressor.rs","byte_start":7065,"byte_end":7085,"line_start":35,"line_end":35,"column_start":12,"column_end":32},"name":"decompress_to_buffer","qualname":"<Decompressor>::decompress_to_buffer","value":"pub fn decompress_to_buffer<C: zstd_safe::WriteBuf +\n                            ?Sized>(&mut Self, &[u8], &mut C)\n-> io::Result<usize>","parent":null,"children":[],"decl_id":null,"docs":" Deompress a single block of data to the given destination buffer.","sig":null,"attributes":[{"value":"/ Deompress a single block of data to the given destination buffer.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/decompressor.rs","byte_start":6833,"byte_end":6902,"line_start":31,"line_end":31,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/decompressor.rs","byte_start":6907,"byte_end":6910,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ Returns the number of bytes written, or an error if something happened","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/decompressor.rs","byte_start":6915,"byte_end":6989,"line_start":33,"line_end":33,"column_start":5,"column_end":79}},{"value":"/ (for instance if the destination buffer was too small).","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/decompressor.rs","byte_start":6994,"byte_end":7053,"line_start":34,"line_end":34,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/decompressor.rs","byte_start":7552,"byte_end":7562,"line_start":49,"line_end":49,"column_start":12,"column_end":22},"name":"decompress","qualname":"<Decompressor>::decompress","value":"pub fn decompress(&mut Self, &[u8], usize) -> io::Result<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Decompress a block of data, and return the result in a `Vec<u8>`.","sig":null,"attributes":[{"value":"/ Decompress a block of data, and return the result in a `Vec<u8>`.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/decompressor.rs","byte_start":7357,"byte_end":7426,"line_start":45,"line_end":45,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/decompressor.rs","byte_start":7431,"byte_end":7434,"line_start":46,"line_end":46,"column_start":5,"column_end":8}},{"value":"/ The decompressed data should be less than `capacity` bytes,","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/decompressor.rs","byte_start":7439,"byte_end":7502,"line_start":47,"line_end":47,"column_start":5,"column_end":68}},{"value":"/ or an error will be returned.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/decompressor.rs","byte_start":7507,"byte_end":7540,"line_start":48,"line_end":48,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":39},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/decompressor.rs","byte_start":8292,"byte_end":8303,"line_start":68,"line_end":68,"column_start":12,"column_end":23},"name":"upper_bound","qualname":"<Decompressor>::upper_bound","value":"pub fn upper_bound(&[u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Get an upper bound on the decompressed size of data, if available","sig":null,"attributes":[{"value":"/ Get an upper bound on the decompressed size of data, if available","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/decompressor.rs","byte_start":7894,"byte_end":7963,"line_start":61,"line_end":61,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/decompressor.rs","byte_start":7968,"byte_end":7971,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ This can be used to pre-allocate enough capacity for `decompress_to_buffer`","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/decompressor.rs","byte_start":7976,"byte_end":8055,"line_start":63,"line_end":63,"column_start":5,"column_end":84}},{"value":"/ and is used by `decompress` to ensure that it does not over-allocate if","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/decompressor.rs","byte_start":8060,"byte_end":8135,"line_start":64,"line_end":64,"column_start":5,"column_end":80}},{"value":"/ you supply a large `capacity`.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/decompressor.rs","byte_start":8140,"byte_end":8174,"line_start":65,"line_end":65,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/decompressor.rs","byte_start":8179,"byte_end":8182,"line_start":66,"line_end":66,"column_start":5,"column_end":8}},{"value":"/ Will return `None` if the upper bound cannot be determined or is larger than `usize::MAX`","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/decompressor.rs","byte_start":8187,"byte_end":8280,"line_start":67,"line_end":67,"column_start":5,"column_end":98}}]},{"kind":"Function","id":{"krate":0,"index":52},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/mod.rs","byte_start":2514,"byte_end":2532,"line_start":21,"line_end":21,"column_start":8,"column_end":26},"name":"compress_to_buffer","qualname":"::block::compress_to_buffer","value":"pub fn compress_to_buffer(&[u8], &mut [u8], i32) -> io::Result<usize>","parent":null,"children":[],"decl_id":null,"docs":" Compresses a single block of data to the given destination buffer.","sig":null,"attributes":[{"value":"/ Compresses a single block of data to the given destination buffer.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/mod.rs","byte_start":2237,"byte_end":2307,"line_start":15,"line_end":15,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/mod.rs","byte_start":2308,"byte_end":2311,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ Returns the number of bytes written, or an error if something happened","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/mod.rs","byte_start":2312,"byte_end":2386,"line_start":17,"line_end":17,"column_start":1,"column_end":75}},{"value":"/ (for instance if the destination buffer was too small).","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/mod.rs","byte_start":2387,"byte_end":2446,"line_start":18,"line_end":18,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/mod.rs","byte_start":2447,"byte_end":2450,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ A level of `0` uses zstd's default (currently `3`).","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/mod.rs","byte_start":2451,"byte_end":2506,"line_start":20,"line_end":20,"column_start":1,"column_end":56}}]},{"kind":"Function","id":{"krate":0,"index":53},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/mod.rs","byte_start":2827,"byte_end":2835,"line_start":32,"line_end":32,"column_start":8,"column_end":16},"name":"compress","qualname":"::block::compress","value":"pub fn compress(&[u8], i32) -> io::Result<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Compresses a block of data and returns the compressed result.","sig":null,"attributes":[{"value":"/ Compresses a block of data and returns the compressed result.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/mod.rs","byte_start":2694,"byte_end":2759,"line_start":29,"line_end":29,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/mod.rs","byte_start":2760,"byte_end":2763,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ A level of `0` uses zstd's default (currently `3`).","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/mod.rs","byte_start":2764,"byte_end":2819,"line_start":31,"line_end":31,"column_start":1,"column_end":56}}]},{"kind":"Function","id":{"krate":0,"index":54},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/mod.rs","byte_start":3149,"byte_end":3169,"line_start":40,"line_end":40,"column_start":8,"column_end":28},"name":"decompress_to_buffer","qualname":"::block::decompress_to_buffer","value":"pub fn decompress_to_buffer(&[u8], &mut [u8]) -> io::Result<usize>","parent":null,"children":[],"decl_id":null,"docs":" Deompress a single block of data to the given destination buffer.","sig":null,"attributes":[{"value":"/ Deompress a single block of data to the given destination buffer.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/mod.rs","byte_start":2933,"byte_end":3002,"line_start":36,"line_end":36,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/mod.rs","byte_start":3003,"byte_end":3006,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ Returns the number of bytes written, or an error if something happened","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/mod.rs","byte_start":3007,"byte_end":3081,"line_start":38,"line_end":38,"column_start":1,"column_end":75}},{"value":"/ (for instance if the destination buffer was too small).","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/mod.rs","byte_start":3082,"byte_end":3141,"line_start":39,"line_end":39,"column_start":1,"column_end":60}}]},{"kind":"Function","id":{"krate":0,"index":55},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/mod.rs","byte_start":3491,"byte_end":3501,"line_start":51,"line_end":51,"column_start":8,"column_end":18},"name":"decompress","qualname":"::block::decompress","value":"pub fn decompress(&[u8], usize) -> io::Result<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Decompresses a block of data and returns the decompressed result.","sig":null,"attributes":[{"value":"/ Decompresses a block of data and returns the decompressed result.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/mod.rs","byte_start":3312,"byte_end":3381,"line_start":47,"line_end":47,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/mod.rs","byte_start":3382,"byte_end":3385,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ The decompressed data should be less than `capacity` bytes,","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/mod.rs","byte_start":3386,"byte_end":3449,"line_start":49,"line_end":49,"column_start":1,"column_end":64}},{"value":"/ or an error will be returned.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/mod.rs","byte_start":3450,"byte_end":3483,"line_start":50,"line_end":50,"column_start":1,"column_end":34}}]},{"kind":"Mod","id":{"krate":0,"index":56},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/dict.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"dict","qualname":"::dict","value":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/dict.rs","parent":null,"children":[{"krate":0,"index":57},{"krate":0,"index":60},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":67},{"krate":0,"index":70},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":77},{"krate":0,"index":80},{"krate":0,"index":83},{"krate":0,"index":85},{"krate":0,"index":88},{"krate":0,"index":91},{"krate":0,"index":93},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":101}],"decl_id":null,"docs":" Train a dictionary from various sources.","sig":null,"attributes":[{"value":"/ Train a dictionary from various sources.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/dict.rs","byte_start":8693,"byte_end":8737,"line_start":1,"line_end":1,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/dict.rs","byte_start":8738,"byte_end":8741,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ A dictionary can help improve the compression of small files.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/dict.rs","byte_start":8742,"byte_end":8807,"line_start":3,"line_end":3,"column_start":1,"column_end":66}},{"value":"/ The dictionary must be present during decompression,","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/dict.rs","byte_start":8808,"byte_end":8864,"line_start":4,"line_end":4,"column_start":1,"column_end":57}},{"value":"/ but can be shared accross multiple \"similar\" files.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/dict.rs","byte_start":8865,"byte_end":8920,"line_start":5,"line_end":5,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/dict.rs","byte_start":8921,"byte_end":8924,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ Creating a dictionary using the `zstd` C library,","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/dict.rs","byte_start":8925,"byte_end":8978,"line_start":7,"line_end":7,"column_start":1,"column_end":54}},{"value":"/ using the `zstd` command-line interface, using this library,","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/dict.rs","byte_start":8979,"byte_end":9043,"line_start":8,"line_end":8,"column_start":1,"column_end":65}},{"value":"/ or using the `train` binary provided, should give the same result,","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/dict.rs","byte_start":9044,"byte_end":9114,"line_start":9,"line_end":9,"column_start":1,"column_end":71}},{"value":"/ and are therefore completely compatible.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/dict.rs","byte_start":9115,"byte_end":9159,"line_start":10,"line_end":10,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/dict.rs","byte_start":9160,"byte_end":9163,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ To use, see [`Encoder::with_dictionary`] or [`Decoder::with_dictionary`].","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/dict.rs","byte_start":9164,"byte_end":9241,"line_start":12,"line_end":12,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/dict.rs","byte_start":9242,"byte_end":9245,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ [`Encoder::with_dictionary`]: ../struct.Encoder.html#method.with_dictionary","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/dict.rs","byte_start":9246,"byte_end":9325,"line_start":14,"line_end":14,"column_start":1,"column_end":80}},{"value":"/ [`Decoder::with_dictionary`]: ../struct.Decoder.html#method.with_dictionary","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/dict.rs","byte_start":9326,"byte_end":9405,"line_start":15,"line_end":15,"column_start":1,"column_end":80}}]},{"kind":"Struct","id":{"krate":0,"index":80},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/dict.rs","byte_start":9578,"byte_end":9595,"line_start":26,"line_end":26,"column_start":12,"column_end":29},"name":"EncoderDictionary","qualname":"::dict::EncoderDictionary","value":"EncoderDictionary {  }","parent":null,"children":[{"krate":0,"index":82}],"decl_id":null,"docs":" Prepared dictionary for compression\n","sig":null,"attributes":[{"value":"/ Prepared dictionary for compression","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/dict.rs","byte_start":9527,"byte_end":9566,"line_start":25,"line_end":25,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/dict.rs","byte_start":9785,"byte_end":9789,"line_start":34,"line_end":34,"column_start":12,"column_end":16},"name":"copy","qualname":"<EncoderDictionary>::copy","value":"pub fn copy(&[u8], i32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a prepared dictionary for compression.","sig":null,"attributes":[{"value":"/ Creates a prepared dictionary for compression.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/dict.rs","byte_start":9665,"byte_end":9715,"line_start":31,"line_end":31,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/dict.rs","byte_start":9720,"byte_end":9723,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ This will copy the dictionary internally.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/dict.rs","byte_start":9728,"byte_end":9773,"line_start":33,"line_end":33,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":87},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/dict.rs","byte_start":10450,"byte_end":10458,"line_start":55,"line_end":55,"column_start":12,"column_end":20},"name":"as_cdict","qualname":"<EncoderDictionary>::as_cdict","value":"pub fn as_cdict(&Self) -> &CDict","parent":null,"children":[],"decl_id":null,"docs":" Returns reference to `CDict` inner object\n","sig":null,"attributes":[{"value":"/ Returns reference to `CDict` inner object","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/dict.rs","byte_start":10393,"byte_end":10438,"line_start":54,"line_end":54,"column_start":5,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":88},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/dict.rs","byte_start":10564,"byte_end":10581,"line_start":61,"line_end":61,"column_start":12,"column_end":29},"name":"DecoderDictionary","qualname":"::dict::DecoderDictionary","value":"DecoderDictionary {  }","parent":null,"children":[{"krate":0,"index":90}],"decl_id":null,"docs":" Prepared dictionary for decompression\n","sig":null,"attributes":[{"value":"/ Prepared dictionary for decompression","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/dict.rs","byte_start":10511,"byte_end":10552,"line_start":60,"line_end":60,"column_start":1,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/dict.rs","byte_start":10772,"byte_end":10776,"line_start":69,"line_end":69,"column_start":12,"column_end":16},"name":"copy","qualname":"<DecoderDictionary>::copy","value":"pub fn copy(&[u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a prepared dictionary for decompression.","sig":null,"attributes":[{"value":"/ Create a prepared dictionary for decompression.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/dict.rs","byte_start":10651,"byte_end":10702,"line_start":66,"line_end":66,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/dict.rs","byte_start":10707,"byte_end":10710,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ This will copy the dictionary internally.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/dict.rs","byte_start":10715,"byte_end":10760,"line_start":68,"line_end":68,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":95},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/dict.rs","byte_start":11322,"byte_end":11330,"line_start":88,"line_end":88,"column_start":12,"column_end":20},"name":"as_ddict","qualname":"<DecoderDictionary>::as_ddict","value":"pub fn as_ddict(&Self) -> &DDict","parent":null,"children":[],"decl_id":null,"docs":" Returns reference to `DDict` inner object\n","sig":null,"attributes":[{"value":"/ Returns reference to `DDict` inner object","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/dict.rs","byte_start":11265,"byte_end":11310,"line_start":87,"line_end":87,"column_start":5,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":96},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/dict.rs","byte_start":11556,"byte_end":11571,"line_start":97,"line_end":97,"column_start":8,"column_end":23},"name":"from_continuous","qualname":"::dict::from_continuous","value":"pub fn from_continuous(&[u8], &[usize], usize) -> io::Result<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Train a dictionary from a big continuous chunk of data.","sig":null,"attributes":[{"value":"/ Train a dictionary from a big continuous chunk of data.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/dict.rs","byte_start":11383,"byte_end":11442,"line_start":93,"line_end":93,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/dict.rs","byte_start":11443,"byte_end":11446,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ This is the most efficient way to train a dictionary,","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/dict.rs","byte_start":11447,"byte_end":11504,"line_start":95,"line_end":95,"column_start":1,"column_end":58}},{"value":"/ since this is directly fed into `zstd`.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/dict.rs","byte_start":11505,"byte_end":11548,"line_start":96,"line_end":96,"column_start":1,"column_end":44}}]},{"kind":"Function","id":{"krate":0,"index":97},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/dict.rs","byte_start":12463,"byte_end":12475,"line_start":125,"line_end":125,"column_start":8,"column_end":20},"name":"from_samples","qualname":"::dict::from_samples","value":"pub fn from_samples<S: AsRef<[u8]>>(&[S], usize) -> io::Result<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Train a dictionary from multiple samples.","sig":null,"attributes":[{"value":"/ Train a dictionary from multiple samples.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/dict.rs","byte_start":12120,"byte_end":12165,"line_start":116,"line_end":116,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/dict.rs","byte_start":12166,"byte_end":12169,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ The samples will internaly be copied to a single continuous buffer,","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/dict.rs","byte_start":12170,"byte_end":12241,"line_start":118,"line_end":118,"column_start":1,"column_end":72}},{"value":"/ so make sure you have enough memory available.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/dict.rs","byte_start":12242,"byte_end":12292,"line_start":119,"line_end":119,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/dict.rs","byte_start":12293,"byte_end":12296,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"/ If you need to stretch your system's limits,","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/dict.rs","byte_start":12297,"byte_end":12345,"line_start":121,"line_end":121,"column_start":1,"column_end":49}},{"value":"/ [`from_continuous`] directly uses the given slice.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/dict.rs","byte_start":12346,"byte_end":12400,"line_start":122,"line_end":122,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/dict.rs","byte_start":12401,"byte_end":12404,"line_start":123,"line_end":123,"column_start":1,"column_end":4}},{"value":"/ [`from_continuous`]: ./fn.from_continuous.html","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/dict.rs","byte_start":12405,"byte_end":12455,"line_start":124,"line_end":124,"column_start":1,"column_end":51}}]},{"kind":"Function","id":{"krate":0,"index":101},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/dict.rs","byte_start":12872,"byte_end":12882,"line_start":138,"line_end":138,"column_start":8,"column_end":18},"name":"from_files","qualname":"::dict::from_files","value":"pub fn from_files<I, P>(I, usize) -> io::Result<Vec<u8>> where\nP: AsRef<path::Path>, I: IntoIterator<Item = P>","parent":null,"children":[],"decl_id":null,"docs":" Train a dict from a list of files.\n","sig":null,"attributes":[{"value":"/ Train a dict from a list of files.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/dict.rs","byte_start":12826,"byte_end":12864,"line_start":137,"line_end":137,"column_start":1,"column_end":39}}]},{"kind":"Mod","id":{"krate":0,"index":104},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"stream","qualname":"::stream","value":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/mod.rs","parent":null,"children":[{"krate":0,"index":105},{"krate":0,"index":189},{"krate":0,"index":286},{"krate":0,"index":307},{"krate":0,"index":414},{"krate":0,"index":499},{"krate":0,"index":500},{"krate":0,"index":503},{"krate":0,"index":506},{"krate":0,"index":509},{"krate":0,"index":512},{"krate":0,"index":515},{"krate":0,"index":516},{"krate":0,"index":519}],"decl_id":null,"docs":" Compress and decompress Zstd streams.","sig":null,"attributes":[{"value":"/ Compress and decompress Zstd streams.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/mod.rs","byte_start":14684,"byte_end":14725,"line_start":1,"line_end":1,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/mod.rs","byte_start":14726,"byte_end":14729,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Zstd streams are the main way to compress and decompress data.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/mod.rs","byte_start":14730,"byte_end":14796,"line_start":3,"line_end":3,"column_start":1,"column_end":67}},{"value":"/ They are compatible with the `zstd` command-line tool.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/mod.rs","byte_start":14797,"byte_end":14855,"line_start":4,"line_end":4,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/mod.rs","byte_start":14856,"byte_end":14859,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ This module provides both `Read` and `Write` interfaces to compressing and","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/mod.rs","byte_start":14860,"byte_end":14938,"line_start":6,"line_end":6,"column_start":1,"column_end":79}},{"value":"/ decompressing.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/mod.rs","byte_start":14939,"byte_end":14957,"line_start":7,"line_end":7,"column_start":1,"column_end":19}}]},{"kind":"Mod","id":{"krate":0,"index":105},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"read","qualname":"::stream::read","value":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","parent":null,"children":[{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":110},{"krate":0,"index":113},{"krate":0,"index":116},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":123},{"krate":0,"index":126},{"krate":0,"index":127},{"krate":0,"index":130},{"krate":0,"index":133},{"krate":0,"index":136},{"krate":0,"index":140},{"krate":0,"index":144},{"krate":0,"index":147},{"krate":0,"index":151},{"krate":0,"index":161},{"krate":0,"index":164},{"krate":0,"index":167},{"krate":0,"index":171},{"krate":0,"index":180},{"krate":0,"index":183}],"decl_id":null,"docs":" Implement pull-based [`Read`] trait for both compressing and decompressing.\n","sig":null,"attributes":[{"value":"/ Implement pull-based [`Read`] trait for both compressing and decompressing.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":20014,"byte_end":20093,"line_start":1,"line_end":1,"column_start":1,"column_end":80}}]},{"kind":"Struct","id":{"krate":0,"index":136},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":20446,"byte_end":20453,"line_start":15,"line_end":15,"column_start":12,"column_end":19},"name":"Decoder","qualname":"::stream::read::Decoder","value":"Decoder {  }","parent":null,"children":[{"krate":0,"index":139}],"decl_id":null,"docs":" A decoder that decompress input data from another `Read`.","sig":null,"attributes":[{"value":"/ A decoder that decompress input data from another `Read`.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":20271,"byte_end":20332,"line_start":11,"line_end":11,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":20333,"byte_end":20336,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ This allows to read a stream of compressed data","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":20337,"byte_end":20388,"line_start":13,"line_end":13,"column_start":1,"column_end":52}},{"value":"/ (good for files or heavy network stream).","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":20389,"byte_end":20434,"line_start":14,"line_end":14,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":140},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":20593,"byte_end":20600,"line_start":20,"line_end":20,"column_start":12,"column_end":19},"name":"Encoder","qualname":"::stream::read::Encoder","value":"Encoder {  }","parent":null,"children":[{"krate":0,"index":143}],"decl_id":null,"docs":" An encoder that compress input data from another `Read`.\n","sig":null,"attributes":[{"value":"/ An encoder that compress input data from another `Read`.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":20521,"byte_end":20581,"line_start":19,"line_end":19,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":146},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":20757,"byte_end":20760,"line_start":26,"line_end":26,"column_start":12,"column_end":15},"name":"new","qualname":"<Decoder>::new","value":"pub fn new(R) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder.\n","sig":null,"attributes":[{"value":"/ Creates a new decoder.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":20719,"byte_end":20745,"line_start":25,"line_end":25,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":149},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":21031,"byte_end":21042,"line_start":35,"line_end":35,"column_start":12,"column_end":23},"name":"with_buffer","qualname":"<Decoder>::with_buffer","value":"pub fn with_buffer(R) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder around a `BufRead`.\n","sig":null,"attributes":[{"value":"/ Creates a new decoder around a `BufRead`.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":20974,"byte_end":21019,"line_start":34,"line_end":34,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":21281,"byte_end":21296,"line_start":41,"line_end":41,"column_start":12,"column_end":27},"name":"with_dictionary","qualname":"<Decoder>::with_dictionary","value":"pub fn with_dictionary(R, &[u8]) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder, using an existing dictionary.","sig":null,"attributes":[{"value":"/ Creates a new decoder, using an existing dictionary.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":21129,"byte_end":21185,"line_start":38,"line_end":38,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":21190,"byte_end":21193,"line_start":39,"line_end":39,"column_start":5,"column_end":8}},{"value":"/ The dictionary must be the same as the one used during compression.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":21198,"byte_end":21269,"line_start":40,"line_end":40,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":21699,"byte_end":21711,"line_start":52,"line_end":52,"column_start":12,"column_end":24},"name":"single_frame","qualname":"<Decoder>::single_frame","value":"pub fn single_frame(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Sets this `Decoder` to stop after the first frame.","sig":null,"attributes":[{"value":"/ Sets this `Decoder` to stop after the first frame.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":21553,"byte_end":21607,"line_start":49,"line_end":49,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":21612,"byte_end":21615,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ By default, it keeps concatenating frames until EOF is reached.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":21620,"byte_end":21687,"line_start":51,"line_end":51,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":155},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":21957,"byte_end":21981,"line_start":60,"line_end":60,"column_start":12,"column_end":36},"name":"with_prepared_dictionary","qualname":"<Decoder>::with_prepared_dictionary","value":"pub fn with_prepared_dictionary<'b>(R, &DecoderDictionary) -> io::Result<Self>\nwhere 'b:'a","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder, using an existing `DecoderDictionary`.","sig":null,"attributes":[{"value":"/ Creates a new decoder, using an existing `DecoderDictionary`.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":21796,"byte_end":21861,"line_start":57,"line_end":57,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":21866,"byte_end":21869,"line_start":58,"line_end":58,"column_start":5,"column_end":8}},{"value":"/ The dictionary must be the same as the one used during compression.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":21874,"byte_end":21945,"line_start":59,"line_end":59,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":157},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":22347,"byte_end":22370,"line_start":74,"line_end":74,"column_start":12,"column_end":35},"name":"recommended_output_size","qualname":"<Decoder>::recommended_output_size","value":"pub fn recommended_output_size() -> usize","parent":null,"children":[],"decl_id":null,"docs":" Recommendation for the size of the output buffer.\n","sig":null,"attributes":[{"value":"/ Recommendation for the size of the output buffer.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":22282,"byte_end":22335,"line_start":73,"line_end":73,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":22492,"byte_end":22499,"line_start":79,"line_end":79,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<Decoder>::get_ref","value":"pub fn get_ref(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquire a reference to the underlying reader.\n","sig":null,"attributes":[{"value":"/ Acquire a reference to the underlying reader.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":22431,"byte_end":22480,"line_start":78,"line_end":78,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":159},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":22755,"byte_end":22762,"line_start":87,"line_end":87,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Decoder>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquire a mutable reference to the underlying reader.","sig":null,"attributes":[{"value":"/ Acquire a mutable reference to the underlying reader.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":22555,"byte_end":22612,"line_start":83,"line_end":83,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":22617,"byte_end":22620,"line_start":84,"line_end":84,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the reader may result in surprising results if","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":22625,"byte_end":22697,"line_start":85,"line_end":85,"column_start":5,"column_end":77}},{"value":"/ this decoder is continued to be used.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":22702,"byte_end":22743,"line_start":86,"line_end":86,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":23004,"byte_end":23010,"line_start":95,"line_end":95,"column_start":12,"column_end":18},"name":"finish","qualname":"<Decoder>::finish","value":"pub fn finish(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Return the inner `Read`.","sig":null,"attributes":[{"value":"/ Return the inner `Read`.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":22830,"byte_end":22858,"line_start":91,"line_end":91,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":22863,"byte_end":22866,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ Calling `finish()` is not *required* after reading a stream -","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":22871,"byte_end":22936,"line_start":93,"line_end":93,"column_start":5,"column_end":70}},{"value":"/ just use it if you need to get the `Read` back.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":22941,"byte_end":22992,"line_start":94,"line_end":94,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":23336,"byte_end":23339,"line_start":110,"line_end":110,"column_start":12,"column_end":15},"name":"new","qualname":"<Encoder>::new","value":"pub fn new(R, i32) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder.\n","sig":null,"attributes":[{"value":"/ Creates a new encoder.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":23298,"byte_end":23324,"line_start":109,"line_end":109,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":169},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":23629,"byte_end":23640,"line_start":119,"line_end":119,"column_start":12,"column_end":23},"name":"with_buffer","qualname":"<Encoder>::with_buffer","value":"pub fn with_buffer(R, i32) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder around a `BufRead`.\n","sig":null,"attributes":[{"value":"/ Creates a new encoder around a `BufRead`.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":23572,"byte_end":23617,"line_start":118,"line_end":118,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":170},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":23899,"byte_end":23914,"line_start":126,"line_end":126,"column_start":12,"column_end":27},"name":"with_dictionary","qualname":"<Encoder>::with_dictionary","value":"pub fn with_dictionary(R, i32, &[u8]) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder, using an existing dictionary.","sig":null,"attributes":[{"value":"/ Creates a new encoder, using an existing dictionary.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":23747,"byte_end":23803,"line_start":123,"line_end":123,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":23808,"byte_end":23811,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ The dictionary must be the same as the one used during compression.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":23816,"byte_end":23887,"line_start":125,"line_end":125,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":174},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":24383,"byte_end":24407,"line_start":142,"line_end":142,"column_start":12,"column_end":36},"name":"with_prepared_dictionary","qualname":"<Encoder>::with_prepared_dictionary","value":"pub fn with_prepared_dictionary<'b>(R, &EncoderDictionary) -> io::Result<Self>\nwhere 'b:'a","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder, using an existing `EncoderDictionary`.","sig":null,"attributes":[{"value":"/ Creates a new encoder, using an existing `EncoderDictionary`.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":24222,"byte_end":24287,"line_start":139,"line_end":139,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":24292,"byte_end":24295,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ The dictionary must be the same as the one used during compression.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":24300,"byte_end":24371,"line_start":141,"line_end":141,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":24773,"byte_end":24796,"line_start":156,"line_end":156,"column_start":12,"column_end":35},"name":"recommended_output_size","qualname":"<Encoder>::recommended_output_size","value":"pub fn recommended_output_size() -> usize","parent":null,"children":[],"decl_id":null,"docs":" Recommendation for the size of the output buffer.\n","sig":null,"attributes":[{"value":"/ Recommendation for the size of the output buffer.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":24708,"byte_end":24761,"line_start":155,"line_end":155,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":177},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":24918,"byte_end":24925,"line_start":161,"line_end":161,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<Encoder>::get_ref","value":"pub fn get_ref(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquire a reference to the underlying reader.\n","sig":null,"attributes":[{"value":"/ Acquire a reference to the underlying reader.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":24857,"byte_end":24906,"line_start":160,"line_end":160,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":25181,"byte_end":25188,"line_start":169,"line_end":169,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Encoder>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquire a mutable reference to the underlying reader.","sig":null,"attributes":[{"value":"/ Acquire a mutable reference to the underlying reader.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":24981,"byte_end":25038,"line_start":165,"line_end":165,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":25043,"byte_end":25046,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the reader may result in surprising results if","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":25051,"byte_end":25123,"line_start":167,"line_end":167,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":25128,"byte_end":25169,"line_start":168,"line_end":168,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":179},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":25430,"byte_end":25436,"line_start":177,"line_end":177,"column_start":12,"column_end":18},"name":"finish","qualname":"<Encoder>::finish","value":"pub fn finish(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Return the inner `Read`.","sig":null,"attributes":[{"value":"/ Return the inner `Read`.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":25256,"byte_end":25284,"line_start":173,"line_end":173,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":25289,"byte_end":25292,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ Calling `finish()` is not *required* after reading a stream -","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":25297,"byte_end":25362,"line_start":175,"line_end":175,"column_start":5,"column_end":70}},{"value":"/ just use it if you need to get the `Read` back.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":25367,"byte_end":25418,"line_start":176,"line_end":176,"column_start":5,"column_end":56}}]},{"kind":"Mod","id":{"krate":0,"index":189},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"write","qualname":"::stream::write","value":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","parent":null,"children":[{"krate":0,"index":190},{"krate":0,"index":191},{"krate":0,"index":194},{"krate":0,"index":197},{"krate":0,"index":200},{"krate":0,"index":201},{"krate":0,"index":204},{"krate":0,"index":207},{"krate":0,"index":208},{"krate":0,"index":211},{"krate":0,"index":214},{"krate":0,"index":218},{"krate":0,"index":222},{"krate":0,"index":227},{"krate":0,"index":234},{"krate":0,"index":237},{"krate":0,"index":241},{"krate":0,"index":245},{"krate":0,"index":261},{"krate":0,"index":266},{"krate":0,"index":270},{"krate":0,"index":279},{"krate":0,"index":283}],"decl_id":null,"docs":" Implement push-based [`Write`] trait for both compressing and decompressing.\n","sig":null,"attributes":[{"value":"/ Implement push-based [`Write`] trait for both compressing and decompressing.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":25880,"byte_end":25960,"line_start":1,"line_end":1,"column_start":1,"column_end":81}}]},{"kind":"Struct","id":{"krate":0,"index":214},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":26465,"byte_end":26472,"line_start":22,"line_end":22,"column_start":12,"column_end":19},"name":"Encoder","qualname":"::stream::write::Encoder","value":"Encoder {  }","parent":null,"children":[{"krate":0,"index":217}],"decl_id":null,"docs":" An encoder that compress and forward data to another writer.","sig":null,"attributes":[{"value":"/ An encoder that compress and forward data to another writer.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":26120,"byte_end":26184,"line_start":12,"line_end":12,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":26185,"byte_end":26188,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ This allows to compress a stream of data","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":26189,"byte_end":26233,"line_start":14,"line_end":14,"column_start":1,"column_end":45}},{"value":"/ (good for files or heavy network stream).","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":26234,"byte_end":26279,"line_start":15,"line_end":15,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":26280,"byte_end":26283,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ Don't forget to call [`finish()`] before dropping it!","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":26284,"byte_end":26341,"line_start":17,"line_end":17,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":26342,"byte_end":26345,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ Note: The zstd library has its own internal input buffer (~128kb).","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":26346,"byte_end":26416,"line_start":19,"line_end":19,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":26417,"byte_end":26420,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ [`finish()`]: #method.finish","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":26421,"byte_end":26453,"line_start":21,"line_end":21,"column_start":1,"column_end":33}}]},{"kind":"Struct","id":{"krate":0,"index":218},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":26654,"byte_end":26661,"line_start":28,"line_end":28,"column_start":12,"column_end":19},"name":"Decoder","qualname":"::stream::write::Decoder","value":"Decoder {  }","parent":null,"children":[{"krate":0,"index":221}],"decl_id":null,"docs":" A decoder that decompress and forward data to another writer.\n","sig":null,"attributes":[{"value":"/ A decoder that decompress and forward data to another writer.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":26577,"byte_end":26642,"line_start":27,"line_end":27,"column_start":1,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":222},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":26850,"byte_end":26867,"line_start":34,"line_end":34,"column_start":12,"column_end":29},"name":"AutoFinishEncoder","qualname":"::stream::write::AutoFinishEncoder","value":"AutoFinishEncoder {  }","parent":null,"children":[{"krate":0,"index":225},{"krate":0,"index":226}],"decl_id":null,"docs":" A wrapper around an `Encoder<W>` that finishes the stream on drop.\n","sig":null,"attributes":[{"value":"/ A wrapper around an `Encoder<W>` that finishes the stream on drop.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":26768,"byte_end":26838,"line_start":33,"line_end":33,"column_start":1,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":232},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":27454,"byte_end":27461,"line_start":54,"line_end":54,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<AutoFinishEncoder>::get_ref","value":"pub fn get_ref(&Self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying writer.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":27392,"byte_end":27442,"line_start":53,"line_end":53,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":233},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":27738,"byte_end":27745,"line_start":62,"line_end":62,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<AutoFinishEncoder>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying writer.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":27537,"byte_end":27595,"line_start":58,"line_end":58,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":27600,"byte_end":27603,"line_start":59,"line_end":59,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the writer may result in surprising results if","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":27608,"byte_end":27680,"line_start":60,"line_end":60,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":27685,"byte_end":27726,"line_start":61,"line_end":61,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":243},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":28540,"byte_end":28543,"line_start":92,"line_end":92,"column_start":12,"column_end":15},"name":"new","qualname":"<Encoder>::new","value":"pub fn new(W, i32) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder.","sig":null,"attributes":[{"value":"/ Creates a new encoder.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":28383,"byte_end":28409,"line_start":87,"line_end":87,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":28414,"byte_end":28417,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ `level`: compression level (1-21).","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":28422,"byte_end":28460,"line_start":89,"line_end":89,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":28465,"byte_end":28468,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ A level of `0` uses zstd's default (currently `3`).","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":28473,"byte_end":28528,"line_start":91,"line_end":91,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":244},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":28927,"byte_end":28942,"line_start":102,"line_end":102,"column_start":12,"column_end":27},"name":"with_dictionary","qualname":"<Encoder>::with_dictionary","value":"pub fn with_dictionary(W, i32, &[u8]) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder, using an existing dictionary.","sig":null,"attributes":[{"value":"/ Creates a new encoder, using an existing dictionary.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":28650,"byte_end":28706,"line_start":96,"line_end":96,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":28711,"byte_end":28714,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ (Provides better compression ratio for small files,","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":28719,"byte_end":28774,"line_start":98,"line_end":98,"column_start":5,"column_end":60}},{"value":"/ but requires the dictionary to be present during decompression.)","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":28779,"byte_end":28847,"line_start":99,"line_end":99,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":28852,"byte_end":28855,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ A level of `0` uses zstd's default (currently `3`).","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":28860,"byte_end":28915,"line_start":101,"line_end":101,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":248},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":29474,"byte_end":29498,"line_start":118,"line_end":118,"column_start":12,"column_end":36},"name":"with_prepared_dictionary","qualname":"<Encoder>::with_prepared_dictionary","value":"pub fn with_prepared_dictionary<'b>(W, &EncoderDictionary) -> io::Result<Self>\nwhere 'b:'a","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder, using an existing prepared `EncoderDictionary`.","sig":null,"attributes":[{"value":"/ Creates a new encoder, using an existing prepared `EncoderDictionary`.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":29247,"byte_end":29321,"line_start":114,"line_end":114,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":29326,"byte_end":29329,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ (Provides better compression ratio for small files,","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":29334,"byte_end":29389,"line_start":116,"line_end":116,"column_start":5,"column_end":60}},{"value":"/ but requires the dictionary to be present during decompression.)","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":29394,"byte_end":29462,"line_start":117,"line_end":117,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":250},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":29984,"byte_end":29995,"line_start":135,"line_end":135,"column_start":12,"column_end":23},"name":"auto_finish","qualname":"<Encoder>::auto_finish","value":"pub fn auto_finish(Self) -> AutoFinishEncoder","parent":null,"children":[],"decl_id":null,"docs":" Returns a wrapper around `self` that will finish the stream on drop.","sig":null,"attributes":[{"value":"/ Returns a wrapper around `self` that will finish the stream on drop.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":29798,"byte_end":29870,"line_start":130,"line_end":130,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":29875,"byte_end":29878,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ # Panic","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":29883,"byte_end":29894,"line_start":132,"line_end":132,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":29899,"byte_end":29902,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ Panics on drop if an error happens when finishing the stream.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":29907,"byte_end":29972,"line_start":134,"line_end":134,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":252},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":30262,"byte_end":30271,"line_start":144,"line_end":144,"column_start":12,"column_end":21},"name":"on_finish","qualname":"<Encoder>::on_finish","value":"pub fn on_finish<F: 'static + FnMut(io::Result<W>) -> ()>(Self, F)\n-> AutoFinishEncoder","parent":null,"children":[],"decl_id":null,"docs":" Returns an encoder that will finish the stream on drop.","sig":null,"attributes":[{"value":"/ Returns an encoder that will finish the stream on drop.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":30117,"byte_end":30176,"line_start":141,"line_end":141,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":30181,"byte_end":30184,"line_start":142,"line_end":142,"column_start":5,"column_end":8}},{"value":"/ Calls the given callback with the result from `finish()`.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":30189,"byte_end":30250,"line_start":143,"line_end":143,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":254},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":30485,"byte_end":30492,"line_start":152,"line_end":152,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<Encoder>::get_ref","value":"pub fn get_ref(&Self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying writer.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":30423,"byte_end":30473,"line_start":151,"line_end":151,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":255},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":30749,"byte_end":30756,"line_start":160,"line_end":160,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Encoder>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying writer.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":30548,"byte_end":30606,"line_start":156,"line_end":156,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":30611,"byte_end":30614,"line_start":157,"line_end":157,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the writer may result in surprising results if","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":30619,"byte_end":30691,"line_start":158,"line_end":158,"column_start":5,"column_end":77}},{"value":"/ this encoder is continued to be used.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":30696,"byte_end":30737,"line_start":159,"line_end":159,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":256},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":31380,"byte_end":31386,"line_start":176,"line_end":176,"column_start":12,"column_end":18},"name":"finish","qualname":"<Encoder>::finish","value":"pub fn finish(Self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" **Required**: Finishes the stream.","sig":null,"attributes":[{"value":"/ **Required**: Finishes the stream.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":30824,"byte_end":30862,"line_start":164,"line_end":164,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":30867,"byte_end":30870,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ You *need* to finish the stream when you're done writing, either with","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":30875,"byte_end":30948,"line_start":166,"line_end":166,"column_start":5,"column_end":78}},{"value":"/ this method or with [`try_finish(self)`](#method.try_finish).","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":30953,"byte_end":31018,"line_start":167,"line_end":167,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":31023,"byte_end":31026,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ This returns the inner writer in case you need it.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":31031,"byte_end":31085,"line_start":169,"line_end":169,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":31090,"byte_end":31093,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ To get back `self` in case an error happened, use `try_finish`.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":31098,"byte_end":31165,"line_start":171,"line_end":171,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":31170,"byte_end":31173,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ **Note**: If you don't want (or can't) call `finish()` manually after","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":31178,"byte_end":31251,"line_start":173,"line_end":173,"column_start":5,"column_end":78}},{"value":"/           writing your data, consider using `auto_finish()` to get an","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":31256,"byte_end":31329,"line_start":174,"line_end":174,"column_start":5,"column_end":78}},{"value":"/           `AutoFinishEncoder`.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":31334,"byte_end":31368,"line_start":175,"line_end":175,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":258},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":31919,"byte_end":31929,"line_start":190,"line_end":190,"column_start":12,"column_end":22},"name":"try_finish","qualname":"<Encoder>::try_finish","value":"pub fn try_finish(Self) -> Result<W, (Self, io::Error)>","parent":null,"children":[],"decl_id":null,"docs":" **Required**: Attempts to finish the stream.","sig":null,"attributes":[{"value":"/ **Required**: Attempts to finish the stream.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":31473,"byte_end":31521,"line_start":180,"line_end":180,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":31526,"byte_end":31529,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ You *need* to finish the stream when you're done writing, either with","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":31534,"byte_end":31607,"line_start":182,"line_end":182,"column_start":5,"column_end":78}},{"value":"/ this method or with [`finish(self)`](#method.finish).","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":31612,"byte_end":31669,"line_start":183,"line_end":183,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":31674,"byte_end":31677,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ This returns the inner writer if the finish was successful, or the","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":31682,"byte_end":31752,"line_start":185,"line_end":185,"column_start":5,"column_end":75}},{"value":"/ object plus an error if it wasn't.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":31757,"byte_end":31795,"line_start":186,"line_end":186,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":31800,"byte_end":31803,"line_start":187,"line_end":187,"column_start":5,"column_end":8}},{"value":"/ `write` on this object will panic after `try_finish` has been called,","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":31808,"byte_end":31881,"line_start":188,"line_end":188,"column_start":5,"column_end":78}},{"value":"/ even if it fails.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":31886,"byte_end":31907,"line_start":189,"line_end":189,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":259},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":32367,"byte_end":32376,"line_start":202,"line_end":202,"column_start":12,"column_end":21},"name":"do_finish","qualname":"<Encoder>::do_finish","value":"pub fn do_finish(&mut Self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Attemps to finish the stream.","sig":null,"attributes":[{"value":"/ Attemps to finish the stream.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":32174,"byte_end":32207,"line_start":198,"line_end":198,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":32212,"byte_end":32215,"line_start":199,"line_end":199,"column_start":5,"column_end":8}},{"value":"/ You *need* to finish the stream when you're done writing, either with","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":32220,"byte_end":32293,"line_start":200,"line_end":200,"column_start":5,"column_end":78}},{"value":"/ this method or with [`finish(self)`](#method.finish).","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":32298,"byte_end":32355,"line_start":201,"line_end":201,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":260},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":32526,"byte_end":32548,"line_start":207,"line_end":207,"column_start":12,"column_end":34},"name":"recommended_input_size","qualname":"<Encoder>::recommended_input_size","value":"pub fn recommended_input_size() -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return a recommendation for the size of data to write at once.\n","sig":null,"attributes":[{"value":"/ Return a recommendation for the size of data to write at once.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":32448,"byte_end":32514,"line_start":206,"line_end":206,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":268},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":32946,"byte_end":32949,"line_start":226,"line_end":226,"column_start":12,"column_end":15},"name":"new","qualname":"<Decoder>::new","value":"pub fn new(W) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder.\n","sig":null,"attributes":[{"value":"/ Creates a new decoder.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":32908,"byte_end":32934,"line_start":225,"line_end":225,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":269},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":33246,"byte_end":33261,"line_start":234,"line_end":234,"column_start":12,"column_end":27},"name":"with_dictionary","qualname":"<Decoder>::with_dictionary","value":"pub fn with_dictionary(W, &[u8]) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder, using an existing dictionary.","sig":null,"attributes":[{"value":"/ Creates a new decoder, using an existing dictionary.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":33037,"byte_end":33093,"line_start":230,"line_end":230,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":33098,"byte_end":33101,"line_start":231,"line_end":231,"column_start":5,"column_end":8}},{"value":"/ (Provides better compression ratio for small files,","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":33106,"byte_end":33161,"line_start":232,"line_end":232,"column_start":5,"column_end":60}},{"value":"/ but requires the dictionary to be present during decompression.)","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":33166,"byte_end":33234,"line_start":233,"line_end":233,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":273},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":33743,"byte_end":33767,"line_start":246,"line_end":246,"column_start":12,"column_end":36},"name":"with_prepared_dictionary","qualname":"<Decoder>::with_prepared_dictionary","value":"pub fn with_prepared_dictionary<'b>(W, &DecoderDictionary) -> io::Result<Self>\nwhere 'b:'a","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder, using an existing prepared `DecoderDictionary`.","sig":null,"attributes":[{"value":"/ Creates a new decoder, using an existing prepared `DecoderDictionary`.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":33516,"byte_end":33590,"line_start":242,"line_end":242,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":33595,"byte_end":33598,"line_start":243,"line_end":243,"column_start":5,"column_end":8}},{"value":"/ (Provides better compression ratio for small files,","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":33603,"byte_end":33658,"line_start":244,"line_end":244,"column_start":5,"column_end":60}},{"value":"/ but requires the dictionary to be present during decompression.)","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":33663,"byte_end":33731,"line_start":245,"line_end":245,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":275},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":34129,"byte_end":34136,"line_start":259,"line_end":259,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<Decoder>::get_ref","value":"pub fn get_ref(&Self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[{"value":"/ Acquires a reference to the underlying writer.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":34067,"byte_end":34117,"line_start":258,"line_end":258,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":276},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":34393,"byte_end":34400,"line_start":267,"line_end":267,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Decoder>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[{"value":"/ Acquires a mutable reference to the underlying writer.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":34192,"byte_end":34250,"line_start":263,"line_end":263,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":34255,"byte_end":34258,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ Note that mutation of the writer may result in surprising results if","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":34263,"byte_end":34335,"line_start":265,"line_end":265,"column_start":5,"column_end":77}},{"value":"/ this decoder is continued to be used.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":34340,"byte_end":34381,"line_start":266,"line_end":266,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":277},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":34510,"byte_end":34520,"line_start":272,"line_end":272,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Decoder>::into_inner","value":"pub fn into_inner(Self) -> W","parent":null,"children":[],"decl_id":null,"docs":" Returns the inner `Write`.\n","sig":null,"attributes":[{"value":"/ Returns the inner `Write`.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":34468,"byte_end":34498,"line_start":271,"line_end":271,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":278},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":34658,"byte_end":34680,"line_start":277,"line_end":277,"column_start":12,"column_end":34},"name":"recommended_input_size","qualname":"<Decoder>::recommended_input_size","value":"pub fn recommended_input_size() -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return a recommendation for the size of data to write at once.\n","sig":null,"attributes":[{"value":"/ Return a recommendation for the size of data to write at once.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":34580,"byte_end":34646,"line_start":276,"line_end":276,"column_start":5,"column_end":71}}]},{"kind":"Function","id":{"krate":0,"index":297},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/functions.rs","byte_start":35322,"byte_end":35332,"line_start":8,"line_end":8,"column_start":8,"column_end":18},"name":"decode_all","qualname":"::stream::functions::decode_all","value":"pub fn decode_all<R: io::Read>(R) -> io::Result<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Decompress from the given source as if using a `Decoder`.","sig":null,"attributes":[{"value":"/ Decompress from the given source as if using a `Decoder`.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/functions.rs","byte_start":35196,"byte_end":35257,"line_start":5,"line_end":5,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/functions.rs","byte_start":35258,"byte_end":35261,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ The input data must be in the zstd frame format.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/functions.rs","byte_start":35262,"byte_end":35314,"line_start":7,"line_end":7,"column_start":1,"column_end":53}}]},{"kind":"Function","id":{"krate":0,"index":299},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/functions.rs","byte_start":35602,"byte_end":35613,"line_start":17,"line_end":17,"column_start":8,"column_end":19},"name":"copy_decode","qualname":"::stream::functions::copy_decode","value":"pub fn copy_decode<R, W>(R, W) -> io::Result<()> where R: io::Read,\nW: io::Write","parent":null,"children":[],"decl_id":null,"docs":" Decompress from the given source as if using a `Decoder`.","sig":null,"attributes":[{"value":"/ Decompress from the given source as if using a `Decoder`.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/functions.rs","byte_start":35472,"byte_end":35533,"line_start":14,"line_end":14,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/functions.rs","byte_start":35534,"byte_end":35537,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ Decompressed data will be appended to `destination`.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/functions.rs","byte_start":35538,"byte_end":35594,"line_start":16,"line_end":16,"column_start":1,"column_end":57}}]},{"kind":"Function","id":{"krate":0,"index":302},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/functions.rs","byte_start":36004,"byte_end":36014,"line_start":32,"line_end":32,"column_start":8,"column_end":18},"name":"encode_all","qualname":"::stream::functions::encode_all","value":"pub fn encode_all<R: io::Read>(R, i32) -> io::Result<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Compress all data from the given source as if using an `Encoder`.","sig":null,"attributes":[{"value":"/ Compress all data from the given source as if using an `Encoder`.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/functions.rs","byte_start":35818,"byte_end":35887,"line_start":27,"line_end":27,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/functions.rs","byte_start":35888,"byte_end":35891,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ Result will be in the zstd frame format.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/functions.rs","byte_start":35892,"byte_end":35936,"line_start":29,"line_end":29,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/functions.rs","byte_start":35937,"byte_end":35940,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ A level of `0` uses zstd's default (currently `3`).","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/functions.rs","byte_start":35941,"byte_end":35996,"line_start":31,"line_end":31,"column_start":1,"column_end":56}}]},{"kind":"Function","id":{"krate":0,"index":304},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/functions.rs","byte_start":36375,"byte_end":36386,"line_start":43,"line_end":43,"column_start":8,"column_end":19},"name":"copy_encode","qualname":"::stream::functions::copy_encode","value":"pub fn copy_encode<R, W>(R, W, i32) -> io::Result<()> where R: io::Read,\nW: io::Write","parent":null,"children":[],"decl_id":null,"docs":" Compress all data from the given source as if using an `Encoder`.","sig":null,"attributes":[{"value":"/ Compress all data from the given source as if using an `Encoder`.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/functions.rs","byte_start":36179,"byte_end":36248,"line_start":38,"line_end":38,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/functions.rs","byte_start":36249,"byte_end":36252,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ Compressed data will be appended to `destination`.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/functions.rs","byte_start":36253,"byte_end":36307,"line_start":40,"line_end":40,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/functions.rs","byte_start":36308,"byte_end":36311,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ A level of `0` uses zstd's default (currently `3`).","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/functions.rs","byte_start":36312,"byte_end":36367,"line_start":42,"line_end":42,"column_start":1,"column_end":56}}]},{"kind":"Mod","id":{"krate":0,"index":307},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/zio/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"zio","qualname":"::stream::zio","value":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/zio/mod.rs","parent":null,"children":[{"krate":0,"index":308},{"krate":0,"index":359},{"krate":0,"index":408},{"krate":0,"index":411}],"decl_id":null,"docs":" Wrappers around raw operations implementing `std::io::{Read, Write}`.\n","sig":null,"attributes":[{"value":"/ Wrappers around raw operations implementing `std::io::{Read, Write}`.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/zio/mod.rs","byte_start":36676,"byte_end":36749,"line_start":1,"line_end":1,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":329},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/zio/reader.rs","byte_start":37232,"byte_end":37238,"line_start":12,"line_end":12,"column_start":12,"column_end":18},"name":"Reader","qualname":"::stream::zio::reader::Reader","value":"Reader {  }","parent":null,"children":[{"krate":0,"index":332},{"krate":0,"index":333},{"krate":0,"index":334},{"krate":0,"index":335},{"krate":0,"index":336}],"decl_id":null,"docs":" Implements the [`Read`] API around an [`Operation`].","sig":null,"attributes":[{"value":"/ Implements the [`Read`] API around an [`Operation`].","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/zio/reader.rs","byte_start":36965,"byte_end":37021,"line_start":6,"line_end":6,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/zio/reader.rs","byte_start":37022,"byte_end":37025,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This can be used to wrap a raw in-memory operation in a read-focused API.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/zio/reader.rs","byte_start":37026,"byte_end":37103,"line_start":8,"line_end":8,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/zio/reader.rs","byte_start":37104,"byte_end":37107,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ It can wrap either a compression or decompression operation, and pulls","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/zio/reader.rs","byte_start":37108,"byte_end":37182,"line_start":10,"line_end":10,"column_start":1,"column_end":75}},{"value":"/ input data from a wrapped `Read`.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/zio/reader.rs","byte_start":37183,"byte_end":37220,"line_start":11,"line_end":11,"column_start":1,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":347},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/zio/reader.rs","byte_start":37718,"byte_end":37721,"line_start":35,"line_end":35,"column_start":12,"column_end":15},"name":"new","qualname":"<Reader<R, D>>::new","value":"pub fn new(R, D) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Reader`.","sig":null,"attributes":[{"value":"/ Creates a new `Reader`.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/zio/reader.rs","byte_start":37597,"byte_end":37624,"line_start":32,"line_end":32,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/zio/reader.rs","byte_start":37629,"byte_end":37632,"line_start":33,"line_end":33,"column_start":5,"column_end":8}},{"value":"/ `reader` will be used to pull input data for the given operation.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/zio/reader.rs","byte_start":37637,"byte_end":37706,"line_start":34,"line_end":34,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":348},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/zio/reader.rs","byte_start":38007,"byte_end":38023,"line_start":46,"line_end":46,"column_start":12,"column_end":28},"name":"set_single_frame","qualname":"<Reader<R, D>>::set_single_frame","value":"pub fn set_single_frame(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Sets `self` to stop after the first decoded frame.\n","sig":null,"attributes":[{"value":"/ Sets `self` to stop after the first decoded frame.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/zio/reader.rs","byte_start":37941,"byte_end":37995,"line_start":45,"line_end":45,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":349},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/zio/reader.rs","byte_start":38154,"byte_end":38167,"line_start":51,"line_end":51,"column_start":12,"column_end":25},"name":"operation_mut","qualname":"<Reader<R, D>>::operation_mut","value":"pub fn operation_mut(&mut Self) -> &mut D","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying operation.\n","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying operation.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/zio/reader.rs","byte_start":38082,"byte_end":38142,"line_start":50,"line_end":50,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":350},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/zio/reader.rs","byte_start":38299,"byte_end":38309,"line_start":56,"line_end":56,"column_start":12,"column_end":22},"name":"reader_mut","qualname":"<Reader<R, D>>::reader_mut","value":"pub fn reader_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying reader.\n","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying reader.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/zio/reader.rs","byte_start":38230,"byte_end":38287,"line_start":55,"line_end":55,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":351},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/zio/reader.rs","byte_start":38430,"byte_end":38436,"line_start":61,"line_end":61,"column_start":12,"column_end":18},"name":"reader","qualname":"<Reader<R, D>>::reader","value":"pub fn reader(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the underlying reader.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the underlying reader.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/zio/reader.rs","byte_start":38369,"byte_end":38418,"line_start":60,"line_end":60,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":352},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/zio/reader.rs","byte_start":38525,"byte_end":38535,"line_start":66,"line_end":66,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Reader<R, D>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Returns the inner reader.\n","sig":null,"attributes":[{"value":"/ Returns the inner reader.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/zio/reader.rs","byte_start":38484,"byte_end":38513,"line_start":65,"line_end":65,"column_start":5,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":377},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/zio/writer.rs","byte_start":44464,"byte_end":44470,"line_start":13,"line_end":13,"column_start":12,"column_end":18},"name":"Writer","qualname":"::stream::zio::writer::Writer","value":"Writer {  }","parent":null,"children":[{"krate":0,"index":380},{"krate":0,"index":381},{"krate":0,"index":382},{"krate":0,"index":383},{"krate":0,"index":384},{"krate":0,"index":385}],"decl_id":null,"docs":" Implements the [`Write`] API around an [`Operation`].","sig":null,"attributes":[{"value":"/ Implements the [`Write`] API around an [`Operation`].","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/zio/writer.rs","byte_start":44197,"byte_end":44254,"line_start":7,"line_end":7,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/zio/writer.rs","byte_start":44255,"byte_end":44258,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ This can be used to wrap a raw in-memory operation in a write-focused API.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/zio/writer.rs","byte_start":44259,"byte_end":44337,"line_start":9,"line_end":9,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/zio/writer.rs","byte_start":44338,"byte_end":44341,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ It can be used with either compression or decompression, and forwards the","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/zio/writer.rs","byte_start":44342,"byte_end":44419,"line_start":11,"line_end":11,"column_start":1,"column_end":78}},{"value":"/ output to a wrapped `Write`.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/zio/writer.rs","byte_start":44420,"byte_end":44452,"line_start":12,"line_end":12,"column_start":1,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":389},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/zio/writer.rs","byte_start":44915,"byte_end":44918,"line_start":35,"line_end":35,"column_start":12,"column_end":15},"name":"new","qualname":"<Writer<W, D>>::new","value":"pub fn new(W, D) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Writer`.","sig":null,"attributes":[{"value":"/ Creates a new `Writer`.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/zio/writer.rs","byte_start":44793,"byte_end":44820,"line_start":32,"line_end":32,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/zio/writer.rs","byte_start":44825,"byte_end":44828,"line_start":33,"line_end":33,"column_start":5,"column_end":8}},{"value":"/ All output from the given operation will be forwarded to `writer`.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/zio/writer.rs","byte_start":44833,"byte_end":44903,"line_start":34,"line_end":34,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":390},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/zio/writer.rs","byte_start":45561,"byte_end":45567,"line_start":58,"line_end":58,"column_start":12,"column_end":18},"name":"finish","qualname":"<Writer<W, D>>::finish","value":"pub fn finish(&mut Self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Ends the stream.","sig":null,"attributes":[{"value":"/ Ends the stream.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/zio/writer.rs","byte_start":45227,"byte_end":45247,"line_start":49,"line_end":49,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/zio/writer.rs","byte_start":45252,"byte_end":45255,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ This *must* be called after all data has been written to finish the","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/zio/writer.rs","byte_start":45260,"byte_end":45331,"line_start":51,"line_end":51,"column_start":5,"column_end":76}},{"value":"/ stream.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/zio/writer.rs","byte_start":45336,"byte_end":45347,"line_start":52,"line_end":52,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/zio/writer.rs","byte_start":45352,"byte_end":45355,"line_start":53,"line_end":53,"column_start":5,"column_end":8}},{"value":"/ If you forget to call this and just drop the `Writer`, you *will* have","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/zio/writer.rs","byte_start":45360,"byte_end":45434,"line_start":54,"line_end":54,"column_start":5,"column_end":79}},{"value":"/ an incomplete output.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/zio/writer.rs","byte_start":45439,"byte_end":45464,"line_start":55,"line_end":55,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/zio/writer.rs","byte_start":45469,"byte_end":45472,"line_start":56,"line_end":56,"column_start":5,"column_end":8}},{"value":"/ Keep calling it until it returns `Ok(())`, then don't call it again.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/zio/writer.rs","byte_start":45477,"byte_end":45549,"line_start":57,"line_end":57,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":396},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/zio/writer.rs","byte_start":47971,"byte_end":47981,"line_start":128,"line_end":128,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Writer<W, D>>::into_inner","value":"pub fn into_inner(Self) -> (W, D)","parent":null,"children":[],"decl_id":null,"docs":" Return the wrapped `Writer` and `Operation`.","sig":null,"attributes":[{"value":"/ Return the wrapped `Writer` and `Operation`.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/zio/writer.rs","byte_start":47794,"byte_end":47842,"line_start":124,"line_end":124,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/zio/writer.rs","byte_start":47847,"byte_end":47850,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ Careful: if you call this before calling [`Writer::finish()`], the","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/zio/writer.rs","byte_start":47855,"byte_end":47925,"line_start":126,"line_end":126,"column_start":5,"column_end":75}},{"value":"/ output may be incomplete.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/zio/writer.rs","byte_start":47930,"byte_end":47959,"line_start":127,"line_end":127,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":397},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/zio/writer.rs","byte_start":48103,"byte_end":48109,"line_start":133,"line_end":133,"column_start":12,"column_end":18},"name":"writer","qualname":"<Writer<W, D>>::writer","value":"pub fn writer(&Self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Gives a reference to the inner writer.\n","sig":null,"attributes":[{"value":"/ Gives a reference to the inner writer.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/zio/writer.rs","byte_start":48049,"byte_end":48091,"line_start":132,"line_end":132,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":398},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/zio/writer.rs","byte_start":48219,"byte_end":48229,"line_start":138,"line_end":138,"column_start":12,"column_end":22},"name":"writer_mut","qualname":"<Writer<W, D>>::writer_mut","value":"pub fn writer_mut(&mut Self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Gives a mutable reference to the inner writer.\n","sig":null,"attributes":[{"value":"/ Gives a mutable reference to the inner writer.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/zio/writer.rs","byte_start":48157,"byte_end":48207,"line_start":137,"line_end":137,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":399},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/zio/writer.rs","byte_start":48346,"byte_end":48355,"line_start":143,"line_end":143,"column_start":12,"column_end":21},"name":"operation","qualname":"<Writer<W, D>>::operation","value":"pub fn operation(&Self) -> &D","parent":null,"children":[],"decl_id":null,"docs":" Gives a reference to the inner operation.\n","sig":null,"attributes":[{"value":"/ Gives a reference to the inner operation.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/zio/writer.rs","byte_start":48289,"byte_end":48334,"line_start":142,"line_end":142,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":400},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/zio/writer.rs","byte_start":48471,"byte_end":48484,"line_start":148,"line_end":148,"column_start":12,"column_end":25},"name":"operation_mut","qualname":"<Writer<W, D>>::operation_mut","value":"pub fn operation_mut(&mut Self) -> &mut D","parent":null,"children":[],"decl_id":null,"docs":" Gives a mutable reference to the inner operation.\n","sig":null,"attributes":[{"value":"/ Gives a mutable reference to the inner operation.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/zio/writer.rs","byte_start":48406,"byte_end":48459,"line_start":147,"line_end":147,"column_start":5,"column_end":58}}]},{"kind":"Mod","id":{"krate":0,"index":414},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"raw","qualname":"::stream::raw","value":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","parent":null,"children":[{"krate":0,"index":415},{"krate":0,"index":418},{"krate":0,"index":419},{"krate":0,"index":422},{"krate":0,"index":425},{"krate":0,"index":428},{"krate":0,"index":431},{"krate":0,"index":434},{"krate":0,"index":435},{"krate":0,"index":438},{"krate":0,"index":441},{"krate":0,"index":444},{"krate":0,"index":453},{"krate":0,"index":455},{"krate":0,"index":458},{"krate":0,"index":462},{"krate":0,"index":465},{"krate":0,"index":468},{"krate":0,"index":473},{"krate":0,"index":479},{"krate":0,"index":482},{"krate":0,"index":485},{"krate":0,"index":490}],"decl_id":null,"docs":" Raw in-memory stream compression/decompression.","sig":null,"attributes":[{"value":"/ Raw in-memory stream compression/decompression.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":52350,"byte_end":52401,"line_start":1,"line_end":1,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":52402,"byte_end":52405,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This module defines a `Decoder` and an `Encoder` to decode/encode streams","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":52406,"byte_end":52483,"line_start":3,"line_end":3,"column_start":1,"column_end":78}},{"value":"/ of data using buffers.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":52484,"byte_end":52510,"line_start":4,"line_end":4,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":52511,"byte_end":52514,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ They are mostly thin wrappers around `zstd_safe::{DCtx, CCtx}`.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":52515,"byte_end":52582,"line_start":6,"line_end":6,"column_start":1,"column_end":68}}]},{"kind":"Trait","id":{"krate":0,"index":444},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":52889,"byte_end":52898,"line_start":17,"line_end":17,"column_start":11,"column_end":20},"name":"Operation","qualname":"::stream::raw::Operation","value":"Operation","parent":null,"children":[{"krate":0,"index":445},{"krate":0,"index":447},{"krate":0,"index":448},{"krate":0,"index":450},{"krate":0,"index":451}],"decl_id":null,"docs":" Represents an abstract compression/decompression operation.","sig":null,"attributes":[{"value":"/ Represents an abstract compression/decompression operation.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":52759,"byte_end":52822,"line_start":14,"line_end":14,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":52823,"byte_end":52826,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ This trait covers both `Encoder` and `Decoder`.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":52827,"byte_end":52878,"line_start":16,"line_end":16,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":445},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":53118,"byte_end":53121,"line_start":24,"line_end":24,"column_start":8,"column_end":11},"name":"run","qualname":"::stream::raw::Operation::run","value":"pub fn run<C: WriteBuf +\n           ?Sized>(&mut Self, &mut InBuffer, &mut OutBuffer<, C>)\n-> io::Result<usize>","parent":{"krate":0,"index":444},"children":[],"decl_id":null,"docs":" Performs a single step of this operation.","sig":null,"attributes":[{"value":"/ Performs a single step of this operation.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":52905,"byte_end":52950,"line_start":18,"line_end":18,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":52955,"byte_end":52958,"line_start":19,"line_end":19,"column_start":5,"column_end":8}},{"value":"/ Should return a hint for the next input size.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":52963,"byte_end":53012,"line_start":20,"line_end":20,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":53017,"byte_end":53020,"line_start":21,"line_end":21,"column_start":5,"column_end":8}},{"value":"/ If the result is `Ok(0)`, it may indicate that a frame was just","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":53025,"byte_end":53092,"line_start":22,"line_end":22,"column_start":5,"column_end":72}},{"value":"/ finished.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":53097,"byte_end":53110,"line_start":23,"line_end":23,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":447},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":53456,"byte_end":53470,"line_start":34,"line_end":34,"column_start":8,"column_end":22},"name":"run_on_buffers","qualname":"::stream::raw::Operation::run_on_buffers","value":"pub fn run_on_buffers(&mut Self, &[u8], &mut [u8]) -> io::Result<Status>","parent":{"krate":0,"index":444},"children":[],"decl_id":null,"docs":" Performs a single step of this operation.","sig":null,"attributes":[{"value":"/ Performs a single step of this operation.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":53270,"byte_end":53315,"line_start":30,"line_end":30,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":53320,"byte_end":53323,"line_start":31,"line_end":31,"column_start":5,"column_end":8}},{"value":"/ This is a comvenience wrapper around `Operation::run` if you don't","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":53328,"byte_end":53398,"line_start":32,"line_end":32,"column_start":5,"column_end":75}},{"value":"/ want to deal with `InBuffer`/`OutBuffer`.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":53403,"byte_end":53448,"line_start":33,"line_end":33,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":448},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":54055,"byte_end":54060,"line_start":55,"line_end":55,"column_start":8,"column_end":13},"name":"flush","qualname":"::stream::raw::Operation::flush","value":"pub fn flush<C: WriteBuf + ?Sized>(&mut Self, &mut OutBuffer<, C>)\n-> io::Result<usize>","parent":{"krate":0,"index":444},"children":[],"decl_id":null,"docs":" Flushes any internal buffer, if any.","sig":null,"attributes":[{"value":"/ Flushes any internal buffer, if any.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":53876,"byte_end":53916,"line_start":51,"line_end":51,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":53921,"byte_end":53924,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ Returns the number of bytes still in the buffer.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":53929,"byte_end":53981,"line_start":53,"line_end":53,"column_start":5,"column_end":57}},{"value":"/ To flush entirely, keep calling until it returns `Ok(0)`.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":53986,"byte_end":54047,"line_start":54,"line_end":54,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":450},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":54344,"byte_end":54350,"line_start":66,"line_end":66,"column_start":8,"column_end":14},"name":"reinit","qualname":"::stream::raw::Operation::reinit","value":"pub fn reinit(&mut Self) -> io::Result<()>","parent":{"krate":0,"index":444},"children":[],"decl_id":null,"docs":" Prepares the operation for a new frame.","sig":null,"attributes":[{"value":"/ Prepares the operation for a new frame.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":54220,"byte_end":54263,"line_start":63,"line_end":63,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":54268,"byte_end":54271,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ This is hopefully cheaper than creating a new operation.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":54276,"byte_end":54336,"line_start":65,"line_end":65,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":451},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":54649,"byte_end":54655,"line_start":76,"line_end":76,"column_start":8,"column_end":14},"name":"finish","qualname":"::stream::raw::Operation::finish","value":"pub fn finish<C: WriteBuf + ?Sized>(&mut Self, &mut OutBuffer<, C>, bool)\n-> io::Result<usize>","parent":{"krate":0,"index":444},"children":[],"decl_id":null,"docs":" Finishes the operation, writing any footer if necessary.","sig":null,"attributes":[{"value":"/ Finishes the operation, writing any footer if necessary.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":54408,"byte_end":54468,"line_start":70,"line_end":70,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":54473,"byte_end":54476,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ Returns the number of bytes still to write.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":54481,"byte_end":54528,"line_start":72,"line_end":72,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":54533,"byte_end":54536,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ Keep calling this method until it returns `Ok(0)`,","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":54541,"byte_end":54595,"line_start":74,"line_end":74,"column_start":5,"column_end":59}},{"value":"/ and then don't ever call this method.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":54600,"byte_end":54641,"line_start":75,"line_end":75,"column_start":5,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":453},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":54948,"byte_end":54952,"line_start":88,"line_end":88,"column_start":12,"column_end":16},"name":"NoOp","qualname":"::stream::raw::NoOp","value":"","parent":null,"children":[],"decl_id":null,"docs":" Dummy operation that just copies its input to the output.\n","sig":null,"attributes":[{"value":"/ Dummy operation that just copies its input to the output.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":54875,"byte_end":54936,"line_start":87,"line_end":87,"column_start":1,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":458},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":55888,"byte_end":55894,"line_start":117,"line_end":117,"column_start":12,"column_end":18},"name":"Status","qualname":"::stream::raw::Status","value":"Status { remaining, bytes_read, bytes_written }","parent":null,"children":[{"krate":0,"index":459},{"krate":0,"index":460},{"krate":0,"index":461}],"decl_id":null,"docs":" Describes the result of an operation.\n","sig":null,"attributes":[{"value":"/ Describes the result of an operation.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":55835,"byte_end":55876,"line_start":116,"line_end":116,"column_start":1,"column_end":42}}]},{"kind":"Field","id":{"krate":0,"index":459},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":55991,"byte_end":56000,"line_start":121,"line_end":121,"column_start":9,"column_end":18},"name":"remaining","qualname":"::stream::raw::Status::remaining","value":"usize","parent":{"krate":0,"index":458},"children":[],"decl_id":null,"docs":" Number of bytes expected for next input.","sig":null,"attributes":[{"value":"/ Number of bytes expected for next input.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":55901,"byte_end":55945,"line_start":118,"line_end":118,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":55950,"byte_end":55953,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ This is just a hint.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":55958,"byte_end":55982,"line_start":120,"line_end":120,"column_start":5,"column_end":29}}]},{"kind":"Field","id":{"krate":0,"index":460},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":56063,"byte_end":56073,"line_start":124,"line_end":124,"column_start":9,"column_end":19},"name":"bytes_read","qualname":"::stream::raw::Status::bytes_read","value":"usize","parent":{"krate":0,"index":458},"children":[],"decl_id":null,"docs":" Number of bytes read from the input.\n","sig":null,"attributes":[{"value":"/ Number of bytes read from the input.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":56014,"byte_end":56054,"line_start":123,"line_end":123,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":461},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":56138,"byte_end":56151,"line_start":127,"line_end":127,"column_start":9,"column_end":22},"name":"bytes_written","qualname":"::stream::raw::Status::bytes_written","value":"usize","parent":{"krate":0,"index":458},"children":[],"decl_id":null,"docs":" Number of bytes written to the output.\n","sig":null,"attributes":[{"value":"/ Number of bytes written to the output.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":56087,"byte_end":56129,"line_start":126,"line_end":126,"column_start":5,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":462},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":56220,"byte_end":56227,"line_start":131,"line_end":131,"column_start":12,"column_end":19},"name":"Decoder","qualname":"::stream::raw::Decoder","value":"Decoder {  }","parent":null,"children":[{"krate":0,"index":464}],"decl_id":null,"docs":" An in-memory decoder for streams of data.\n","sig":null,"attributes":[{"value":"/ An in-memory decoder for streams of data.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":56163,"byte_end":56208,"line_start":130,"line_end":130,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":466},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":56337,"byte_end":56340,"line_start":137,"line_end":137,"column_start":12,"column_end":15},"name":"new","qualname":"<Decoder>::new","value":"pub fn new() -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder.\n","sig":null,"attributes":[{"value":"/ Creates a new decoder.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":56299,"byte_end":56325,"line_start":136,"line_end":136,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":467},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":56487,"byte_end":56502,"line_start":142,"line_end":142,"column_start":12,"column_end":27},"name":"with_dictionary","qualname":"<Decoder>::with_dictionary","value":"pub fn with_dictionary(&[u8]) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder initialized with the given dictionary.\n","sig":null,"attributes":[{"value":"/ Creates a new decoder initialized with the given dictionary.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":56411,"byte_end":56475,"line_start":141,"line_end":141,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":470},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":56862,"byte_end":56886,"line_start":154,"line_end":154,"column_start":12,"column_end":36},"name":"with_prepared_dictionary","qualname":"<Decoder>::with_prepared_dictionary","value":"pub fn with_prepared_dictionary<'b>(&DecoderDictionary) -> io::Result<Self>\nwhere 'b:'a","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder, using an existing `DecoderDictionary`.\n","sig":null,"attributes":[{"value":"/ Creates a new decoder, using an existing `DecoderDictionary`.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":56785,"byte_end":56850,"line_start":153,"line_end":153,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":472},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":57255,"byte_end":57268,"line_start":168,"line_end":168,"column_start":12,"column_end":25},"name":"set_parameter","qualname":"<Decoder>::set_parameter","value":"pub fn set_parameter(&mut Self, DParameter) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets a decompression parameter for this decoder.\n","sig":null,"attributes":[{"value":"/ Sets a decompression parameter for this decoder.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":57191,"byte_end":57243,"line_start":167,"line_end":167,"column_start":5,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":479},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":58289,"byte_end":58296,"line_start":209,"line_end":209,"column_start":12,"column_end":19},"name":"Encoder","qualname":"::stream::raw::Encoder","value":"Encoder {  }","parent":null,"children":[{"krate":0,"index":481}],"decl_id":null,"docs":" An in-memory encoder for streams of data.\n","sig":null,"attributes":[{"value":"/ An in-memory encoder for streams of data.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":58232,"byte_end":58277,"line_start":208,"line_end":208,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":483},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":58406,"byte_end":58409,"line_start":215,"line_end":215,"column_start":12,"column_end":15},"name":"new","qualname":"<Encoder>::new","value":"pub fn new(i32) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder.\n","sig":null,"attributes":[{"value":"/ Creates a new encoder.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":58368,"byte_end":58394,"line_start":214,"line_end":214,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":484},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":58573,"byte_end":58588,"line_start":220,"line_end":220,"column_start":12,"column_end":27},"name":"with_dictionary","qualname":"<Encoder>::with_dictionary","value":"pub fn with_dictionary(i32, &[u8]) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder initialized with the given dictionary.\n","sig":null,"attributes":[{"value":"/ Creates a new encoder initialized with the given dictionary.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":58497,"byte_end":58561,"line_start":219,"line_end":219,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":487},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":59057,"byte_end":59081,"line_start":237,"line_end":237,"column_start":12,"column_end":36},"name":"with_prepared_dictionary","qualname":"<Encoder>::with_prepared_dictionary","value":"pub fn with_prepared_dictionary<'b>(&EncoderDictionary) -> io::Result<Self>\nwhere 'b:'a","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder using an existing `EncoderDictionary`.\n","sig":null,"attributes":[{"value":"/ Creates a new encoder using an existing `EncoderDictionary`.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":58981,"byte_end":59045,"line_start":236,"line_end":236,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":489},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":59448,"byte_end":59461,"line_start":251,"line_end":251,"column_start":12,"column_end":25},"name":"set_parameter","qualname":"<Encoder>::set_parameter","value":"pub fn set_parameter(&mut Self, CParameter) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Sets a compression parameter for this encoder.\n","sig":null,"attributes":[{"value":"/ Sets a compression parameter for this encoder.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":59386,"byte_end":59436,"line_start":250,"line_end":250,"column_start":5,"column_end":55}}]},{"kind":"Function","id":{"krate":0,"index":530},"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/lib.rs","byte_start":842,"byte_end":865,"line_start":35,"line_end":35,"column_start":8,"column_end":31},"name":"compression_level_range","qualname":"::compression_level_range","value":"pub fn compression_level_range()\n-> std::ops::RangeInclusive<zstd_safe::CompressionLevel>","parent":null,"children":[],"decl_id":null,"docs":" The accepted range of compression levels.\n","sig":null,"attributes":[{"value":"/ The accepted range of compression levels.","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/lib.rs","byte_start":789,"byte_end":834,"line_start":34,"line_end":34,"column_start":1,"column_end":46}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/compressor.rs","byte_start":4429,"byte_end":4439,"line_start":16,"line_end":16,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":19}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/decompressor.rs","byte_start":6475,"byte_end":6487,"line_start":17,"line_end":17,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":38},{"krate":0,"index":39}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/dict.rs","byte_start":9632,"byte_end":9649,"line_start":30,"line_end":30,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":84}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/dict.rs","byte_start":9937,"byte_end":9954,"line_start":41,"line_end":41,"column_start":10,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":87}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/dict.rs","byte_start":10618,"byte_end":10635,"line_start":65,"line_end":65,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":92}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/dict.rs","byte_start":10906,"byte_end":10923,"line_start":76,"line_end":76,"column_start":10,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":95}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":20682,"byte_end":20689,"line_start":24,"line_end":24,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":146}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":20948,"byte_end":20955,"line_start":33,"line_end":33,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":149},{"krate":0,"index":150}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":21532,"byte_end":21539,"line_start":48,"line_end":48,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":555},{"krate":0,"index":556}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":23129,"byte_end":23136,"line_start":102,"line_end":102,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":163}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":23261,"byte_end":23268,"line_start":108,"line_end":108,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":166}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":23546,"byte_end":23553,"line_start":117,"line_end":117,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":169},{"krate":0,"index":170}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":24201,"byte_end":24208,"line_start":138,"line_end":138,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":174},{"krate":0,"index":176},{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":557},{"krate":0,"index":558},{"krate":0,"index":559},{"krate":0,"index":560},{"krate":0,"index":561},{"krate":0,"index":562},{"krate":0,"index":563}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":25555,"byte_end":25562,"line_start":184,"line_end":184,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":182}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":27110,"byte_end":27127,"line_start":42,"line_end":42,"column_start":20,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":230},{"krate":0,"index":232},{"krate":0,"index":233}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":27851,"byte_end":27868,"line_start":67,"line_end":67,"column_start":25,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":236}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":28099,"byte_end":28116,"line_start":76,"line_end":76,"column_start":26,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":239},{"krate":0,"index":240}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":28357,"byte_end":28364,"line_start":86,"line_end":86,"column_start":16,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":243},{"krate":0,"index":244}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":29226,"byte_end":29233,"line_start":113,"line_end":113,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":248},{"krate":0,"index":250},{"krate":0,"index":252},{"krate":0,"index":254},{"krate":0,"index":255},{"krate":0,"index":256},{"krate":0,"index":258},{"krate":0,"index":259},{"krate":0,"index":260},{"krate":0,"index":564},{"krate":0,"index":565},{"krate":0,"index":566},{"krate":0,"index":567},{"krate":0,"index":568},{"krate":0,"index":569},{"krate":0,"index":570}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":32672,"byte_end":32679,"line_start":214,"line_end":214,"column_start":30,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":264},{"krate":0,"index":265}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":32882,"byte_end":32889,"line_start":224,"line_end":224,"column_start":16,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":268},{"krate":0,"index":269}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":33495,"byte_end":33502,"line_start":241,"line_end":241,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":273},{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":277},{"krate":0,"index":278},{"krate":0,"index":571},{"krate":0,"index":572}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":34800,"byte_end":34807,"line_start":284,"line_end":284,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":281},{"krate":0,"index":282}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/zio/reader.rs","byte_start":37578,"byte_end":37584,"line_start":31,"line_end":31,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":347},{"krate":0,"index":348},{"krate":0,"index":349},{"krate":0,"index":350},{"krate":0,"index":351},{"krate":0,"index":352}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/zio/reader.rs","byte_start":39208,"byte_end":39214,"line_start":95,"line_end":95,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":358}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/zio/writer.rs","byte_start":44736,"byte_end":44742,"line_start":27,"line_end":27,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":389},{"krate":0,"index":390},{"krate":0,"index":392},{"krate":0,"index":395},{"krate":0,"index":396},{"krate":0,"index":397},{"krate":0,"index":398},{"krate":0,"index":399},{"krate":0,"index":400}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/zio/writer.rs","byte_start":48867,"byte_end":48873,"line_start":165,"line_end":165,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":404},{"krate":0,"index":406}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":54974,"byte_end":54978,"line_start":90,"line_end":90,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":456}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":56276,"byte_end":56283,"line_start":135,"line_end":135,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":466},{"krate":0,"index":467}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":56767,"byte_end":56774,"line_start":152,"line_end":152,"column_start":10,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":470},{"krate":0,"index":472}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":57464,"byte_end":57471,"line_start":176,"line_end":176,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":474},{"krate":0,"index":476},{"krate":0,"index":477}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":58345,"byte_end":58352,"line_start":213,"line_end":213,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":483},{"krate":0,"index":484}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":58963,"byte_end":58970,"line_start":235,"line_end":235,"column_start":10,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":487},{"krate":0,"index":489}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":59661,"byte_end":59668,"line_start":259,"line_end":259,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":492},{"krate":0,"index":494},{"krate":0,"index":496},{"krate":0,"index":498}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/lib.rs","byte_start":641,"byte_end":646,"line_start":25,"line_end":25,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":3}},{"kind":"Mod","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/lib.rs","byte_start":656,"byte_end":660,"line_start":26,"line_end":26,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":56}},{"kind":"Mod","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/lib.rs","byte_start":670,"byte_end":676,"line_start":27,"line_end":27,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":104}},{"kind":"Mod","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/mod.rs","byte_start":14967,"byte_end":14971,"line_start":9,"line_end":9,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":105}},{"kind":"Mod","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/mod.rs","byte_start":14981,"byte_end":14986,"line_start":10,"line_end":10,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":189}},{"kind":"Mod","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/mod.rs","byte_start":15012,"byte_end":15015,"line_start":13,"line_end":13,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":307}},{"kind":"Mod","span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/mod.rs","byte_start":15051,"byte_end":15054,"line_start":18,"line_end":18,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":414}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/compressor.rs","byte_start":4429,"byte_end":4439,"line_start":16,"line_end":16,"column_start":6,"column_end":16},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":545},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/block/decompressor.rs","byte_start":6475,"byte_end":6487,"line_start":17,"line_end":17,"column_start":6,"column_end":18},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":550},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/dict.rs","byte_start":9632,"byte_end":9649,"line_start":30,"line_end":30,"column_start":6,"column_end":23},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":80},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/dict.rs","byte_start":9937,"byte_end":9954,"line_start":41,"line_end":41,"column_start":10,"column_end":27},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":80},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/dict.rs","byte_start":10618,"byte_end":10635,"line_start":65,"line_end":65,"column_start":6,"column_end":23},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":88},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/dict.rs","byte_start":10906,"byte_end":10923,"line_start":76,"line_end":76,"column_start":10,"column_end":27},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":88},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":20682,"byte_end":20689,"line_start":24,"line_end":24,"column_start":15,"column_end":22},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":136},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":20948,"byte_end":20955,"line_start":33,"line_end":33,"column_start":18,"column_end":25},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":136},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":21532,"byte_end":21539,"line_start":48,"line_end":48,"column_start":22,"column_end":29},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":136},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":23129,"byte_end":23136,"line_start":102,"line_end":102,"column_start":27,"column_end":34},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":136},"to":{"krate":1,"index":4311}},{"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":23261,"byte_end":23268,"line_start":108,"line_end":108,"column_start":15,"column_end":22},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":140},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":23546,"byte_end":23553,"line_start":117,"line_end":117,"column_start":18,"column_end":25},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":140},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":24201,"byte_end":24208,"line_start":138,"line_end":138,"column_start":22,"column_end":29},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":140},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/read/mod.rs","byte_start":25555,"byte_end":25562,"line_start":184,"line_end":184,"column_start":27,"column_end":34},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":140},"to":{"krate":1,"index":4311}},{"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":27110,"byte_end":27127,"line_start":42,"line_end":42,"column_start":20,"column_end":37},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":222},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":27851,"byte_end":27868,"line_start":67,"line_end":67,"column_start":25,"column_end":42},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":222},"to":{"krate":2,"index":3115}},{"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":28099,"byte_end":28116,"line_start":76,"line_end":76,"column_start":26,"column_end":43},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":222},"to":{"krate":1,"index":4372}},{"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":28357,"byte_end":28364,"line_start":86,"line_end":86,"column_start":16,"column_end":23},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":214},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":29226,"byte_end":29233,"line_start":113,"line_end":113,"column_start":20,"column_end":27},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":214},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":32672,"byte_end":32679,"line_start":214,"line_end":214,"column_start":30,"column_end":37},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":214},"to":{"krate":1,"index":4372}},{"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":32882,"byte_end":32889,"line_start":224,"line_end":224,"column_start":16,"column_end":23},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":218},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":33495,"byte_end":33502,"line_start":241,"line_end":241,"column_start":20,"column_end":27},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":218},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/write/mod.rs","byte_start":34800,"byte_end":34807,"line_start":284,"line_end":284,"column_start":26,"column_end":33},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":218},"to":{"krate":1,"index":4372}},{"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/zio/reader.rs","byte_start":37578,"byte_end":37584,"line_start":31,"line_end":31,"column_start":12,"column_end":18},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":329},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/zio/reader.rs","byte_start":39208,"byte_end":39214,"line_start":95,"line_end":95,"column_start":21,"column_end":27},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":329},"to":{"krate":1,"index":4311}},{"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/zio/writer.rs","byte_start":44736,"byte_end":44742,"line_start":27,"line_end":27,"column_start":12,"column_end":18},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":377},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/zio/writer.rs","byte_start":48867,"byte_end":48873,"line_start":165,"line_end":165,"column_start":22,"column_end":28},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":377},"to":{"krate":1,"index":4372}},{"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":54974,"byte_end":54978,"line_start":90,"line_end":90,"column_start":20,"column_end":24},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":453},"to":{"krate":0,"index":444}},{"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":56276,"byte_end":56283,"line_start":135,"line_end":135,"column_start":6,"column_end":13},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":462},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":56767,"byte_end":56774,"line_start":152,"line_end":152,"column_start":10,"column_end":17},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":462},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":57464,"byte_end":57471,"line_start":176,"line_end":176,"column_start":20,"column_end":27},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":462},"to":{"krate":0,"index":444}},{"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":58345,"byte_end":58352,"line_start":213,"line_end":213,"column_start":6,"column_end":13},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":479},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":58963,"byte_end":58970,"line_start":235,"line_end":235,"column_start":10,"column_end":17},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":479},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/iharte/.cargo/registry/src/github.com-1ecc6299db9ec823/zstd-0.9.0+zstd.1.5.0/src/stream/raw.rs","byte_start":59661,"byte_end":59668,"line_start":259,"line_end":259,"column_start":24,"column_end":31},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":479},"to":{"krate":0,"index":444}}]}